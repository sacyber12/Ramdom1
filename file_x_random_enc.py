#__________________| INFO |___________________#
#______SCRIPT ENCRYPTED BY PYTHON 3.0
#______CODING BY: MEHEDI
#______TELEGRAM : https://t.me/lokmanvau
#________________| SCRIPT DATA |_____________#

import base64
exec(base64.b64decode(b'aW1wb3J0IG9zLHJlcXVlc3RzLGpzb24sdGltZSxyZSxyYW5kb20sc3lzLHV1aWQsc3RyaW5nLHN1YnByb2Nlc3MsemxpYixwbGF0Zm9ybQ0KaW1wb3J0IG1hcnNoYWwNCmltcG9ydCBvcyxodHRweA0KaW1wb3J0IG9zLGJhc2U2NA0KZnJvbSBvcyBpbXBvcnQgc3lzdGVtIGFzIGNscg0KcHJpbnQoJ1wwMzNbMTszMm1bXDAzM1sxOzMxbS1cMDMzWzE7MzJtXSBcMDMzWzE7MzJtIGluc3RhbGwgbW9kdWxlcy4uLlxuIEl0IHdpbGwgdGFrZSBzb21lIHNlY29uZHMuLi4nKQ0Kb3Muc3lzdGVtKCd4ZGctb3BlbiBodHRwczovL2ZhY2Vib29rLmNvbS9ncm91cHMvMTIzNDg3Njk5MDUyODgzMC8nKQ0Kb3Muc3lzdGVtKCd4ZGctb3BlbiBodHRwczovL3lvdXR1YmUuY29tL0B1c2VyLXNhc2lmYXRoMTInKQ0Kb3Muc3lzdGVtKCdwaXAgaW5zdGFsbCBodHRwbGliMicpDQp0cnk6DQogICAgICAgIGltcG9ydCBvcyxyZXF1ZXN0cyxqc29uLHRpbWUscmUscmFuZG9tLHN5cyx1dWlkLHN0cmluZyxzdWJwcm9jZXNzLHBsYXRmb3JtDQogICAgICAgIGZyb20gc3RyaW5nIGltcG9ydCAqDQogICAgICAgIGZyb20gY29uY3VycmVudC5mdXR1cmVzIGltcG9ydCBUaHJlYWRQb29sRXhlY3V0b3IgYXMgdHJlZCANCmV4Y2VwdCBNb2R1bGVOb3RGb3VuZEVycm9yOg0KICAgICAgICBwcmludCgnXG4gSW5zdGFsbGluZyBtaXNzaW5nIG1vZHVsZXMgLi4uJykNCiAgICAgICAgb3Muc3lzdGVtKCdwaXAgaW5zdGFsbCByZXF1ZXN0cyBmdXR1cmVzPT0yID4gL2Rldi9udWxsJykNCiAgICAgICAgb3Muc3lzdGVtKCdweXRob24gZmlsZV94X3JhbmRvbS5weScpDQojLS0tLS0tLS0tLS0tLS0tLS0tWyBQUk9YWSBTRVJWRVIgXS0tLS0tLS0tLS0tLS0tLS0tLS0jDQpwcm94eWxpc3QgPSByZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vYXBpLnByb3h5c2NyYXBlLmNvbS92Mi8/cmVxdWVzdD1kaXNwbGF5cHJveGllcyZwcm90b2NvbD1zb2NrczQmdGltZW91dD0xMDAwMDAmY291bnRyeT1hbGwmc3NsPWFsbCZhbm9ueW1pdHk9YWxsJykudGV4dA0Kb3Blbignc29ja3NrdS50eHQnLCAndycpLndyaXRlKHByb3h5bGlzdCkNCnByb3hzaSA9IG9wZW4oJ3NvY2tza3UudHh0JywgJ3InKS5yZWFkKCkuc3BsaXRsaW5lcygpDQoNCm9zLnN5c3RlbSgncm0gLXJmIHByb3gudHh0JykgIA0KdHJ5Og0KICAgIHByb3g9IHJlcXVlc3RzLmdldCgnaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL1JhbXhhbnRhbmhhL2RhdGEvbWFpbi9wcm94aWVzLnR4dCcpLnRleHQNCiAgICBvcGVuKCdwcm94LnR4dCcsJ3cnKS53cml0ZShwcm94KQ0KZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOg0KICAgIHBhc3MNCnByb3g9b3BlbigncHJveC50eHQnLCdyJykucmVhZCgpLnNwbGl0bGluZXMoKQ0KZ3QgPSByYW5kb20uY2hvaWNlKFsnR1QtMTAxNScsJ0dULTEwMjAnLCdHVC0xMDMwJywnR1QtMTAzNScsJ0dULTEwNDAnLCdHVC0xMDQ1JywnR1QtMTA1MCcsJ0dULTEyNDAnLCdHVC0xNDQwJywnR1QtMTQ1MCcsJ0dULTE4MTkwJywnR1QtMTgyNjInLCdHVC0xOTA2MEknLCdHVC0xOTA4MicsJ0dULTE5MDgzJywnR1QtMTkxMDUnLCdHVC0xOTE1MicsJ0dULTE5MTkyJywnR1QtMTkzMDAnLCdHVC0xOTUwNScsJ0dULTIwMDAnLCdHVC0yMDAwMCcsJ0dULTIwMHMnLCdHVC0zMDAwJywnR1QtNDE0WE9QJywnR1QtNjkxOCcsJ0dULTcwMTAnLCdHVC03MDIwJywnR1QtNzAzMCcsJ0dULTcwNDAnLCdHVC03MDUwJywnR1QtNzEwMCcsJ0dULTcxMDUnLCdHVC03MTEwJywnR1QtNzIwNScsJ0dULTcyMTAnLCdHVC03MjQwUicsJ0dULTcyNDUnLCdHVC03MzAzJywnR1QtNzMxMCcsJ0dULTczMjAnLCdHVC03MzI1JywnR1QtNzMyNicsJ0dULTczNDAnLCdHVC03NDA1JywnR1QtNzU1MCAgICA1R1QtODAwNScsJ0dULTgwMTAnLCdHVC04MScsJ0dULTgxMCcsJ0dULTgxMDUnLCdHVC04MTEwJywnR1QtODIyMFMnLCdHVC04NDEwJywnR1QtOTMwMCcsJ0dULTkzMjAnLCdHVC05M0cnLCdHVC1BNzEwMCcsJ0dULUE5NTAwJywnR1QtQU5EUk9JRCcsJ0dULUIyNzEwJywnR1QtQjUzMzAnLCdHVC1CNTMzMEInLCdHVC1CNTMzMEwnLCdHVC1CNTMzMFpLQUlOVScsJ0dULUI1NTEwJywnR1QtQjU1MTInLCdHVC1CNTcyMicsJ0dULUI3NTEwJywnR1QtQjc3MjInLCdHVC1CNzgxMCcsJ0dULUI5MTUwJywnR1QtQjkzODgnLCdHVC1DMzAxMCcsJ0dULUMzMjYyJywnR1QtQzMzMTBSJywnR1QtQzMzMTInLCdHVC1DMzMxMlInLCdHVC1DMzMxM1QnLCdHVC1DMzMyMicsJ0dULUMzMzIyaScsJ0dULUMzNTIwJywnR1QtQzM1MjBJJywnR1QtQzM1OTInLCdHVC1DMzU5NScsJ0dULUMzNzgyJywnR1QtQzY3MTInLCdHVC1FMTI4MlQnLCdHVC1FMTUwMCcsJ0dULUUyMjAwJywnR1QtRTIyMDInLCdHVC1FMjI1MCcsJ0dULUUyMjUyJywnR1QtRTI2MDAnLCdHVC1FMjY1MlcnLCdHVC1FMzIxMCcsJ0dULUUzMzA5JywnR1QtRTMzMDlJJywnR1QtRTMzMDlUJywnR1QtRzUzMEgnLCdHVC1nOTAwZicsJ0dULUc5MzBGJywnR1QtSDk1MDAnLCdHVC1JNTUwOCcsJ0dULUk1ODAxJywnR1QtSTY0MTAnLCdHVC1JODE1MCcsJ0dULUk4MTYwT0tMVFBBJywnR1QtSTgxNjBaV0xUVFQnLCdHVC1JODI1OCcsJ0dULUk4MjYyRCcsJ0dULUk4MjY4JywnR1QtSTg1MDUnLCdHVC1JODUzMEJBQUJUVScsJ0dULUk4NTMwQkFMQ0hPJywnR1QtSTg1MzBCQUxUVFQnLCdHVC1JODU1MEUnLCdHVC1pODcwMCcsJ0dULUk4NzUwJywnR1QtSTkwMCcsJ0dULUk5MDA4TCcsJ0dULWk5MDQwJywnR1QtSTkwODBFJywnR1QtSTkwODJDJywnR1QtSTkwODJFV0FJTlUnLCdHVC1JOTA4MmknLCdHVC1JOTEwMEcnLCdHVC1JOTEwMExLTENIVCcsJ0dULUk5MTAwTScsJ0dULUk5MTAwUCcsJ0dULUk5MTAwVCcsJ0dULUk5MTA1VUFOREJUJywnR1QtSTkxMjhFJywnR1QtSTkxMjhJJywnR1QtSTkxMjhWJywnR1QtSTkxNThQJywnR1QtSTkxNThWJywnR1QtSTkxNjhJJywnR1QtSTkxOTJJJywnR1QtSTkxOTVIJywnR1QtSTkxOTVMJywnR1QtSTkyNTAnLCdHVC1JOTMwM0knLCdHVC1JOTMwNU4nLCdHVC1JOTMwOEknLCdHVC1JOTUwNUcnLCdHVC1JOTUwNVgnLCdHVC1JOTUwN1YnLCdHVC1JOTYwMCcsJ0dULW0xOTAnLCdHVC1NNTY1MCcsJ0dULW1pbmknLCdHVC1ONTAwMFMnLCdHVC1ONTEwMCcsJ0dULU41MTA1JywnR1QtTjUxMTAnLCdHVC1ONTEyMCcsJ0dULU43MDAwQicsJ0dULU43MDA1JywnR1QtTjcxMDBUJywnR1QtTjcxMDInLCdHVC1ONzEwNScsJ0dULU43MTA1VCcsJ0dULU43MTA4JywnR1QtTjcxMDhEJywnR1QtTjgwMDAnLCdHVC1OODAwNScsJ0dULU44MDEwJywnR1QtTjgwMjAnLCdHVC1OOTAwMCcsJ0dULU45NTA1JywnR1QtUDEwMDBDV0FYU0EnLCdHVC1QMTAwME0nLCdHVC1QMTAwMFQnLCdHVC1QMTAxMCcsJ0dULVAzMTAwQicsJ0dULVAzMTA1JywnR1QtUDMxMDgnLCdHVC1QMzExMCcsJ0dULVA1MTAwJywnR1QtUDUyMDAnLCdHVC1QNTIxMFhEMScsJ0dULVA1MjIwJywnR1QtUDYyMDAnLCdHVC1QNjIwMEwnLCdHVC1QNjIwMScsJ0dULVA2MjEwJywnR1QtUDYyMTEnLCdHVC1QNjgwMCcsJ0dULVA3MTAwJywnR1QtUDczMDAnLCdHVC1QNzMwMEInLCdHVC1QNzMxMCcsJ0dULVA3MzIwJywnR1QtUDc1MDBEJywnR1QtUDc1MDBNJywnR1QtUDc1MDBSJywnR1QtUDc1MDBWJywnR1QtUDc1MDEnLCdHVC1QNzUxMScsJ0dULVMzMzMwJywnR1QtUzMzMzInLCdHVC1TMzMzMycsJ0dULVMzMzcwJywnR1QtUzM1MTgnLCdHVC1TMzU3MCcsJ0dULVMzNjAwaScsJ0dULVMzNjUwJywnR1QtUzM2NTNXJywnR1QtUzM3NzBLJywnR1QtUzM3NzBNJywnR1QtUzM4MDBXJywnR1QtUzM4MDInLCdHVC1TMzg1MCcsJ0dULVM1MjIwJywnR1QtUzUyMjBSJywnR1QtUzUyMjInLCdHVC1TNTIzMCcsJ0dULVM1MjMwVycsJ0dULVM1MjMzVCcsJ0dULXM1MjMzdycsJ0dULVM1MjUwJywnR1QtUzUyNTMnLCdHVC1zNTI2MCcsJ0dULVM1MjgwJywnR1QtUzUyODInLCdHVC1TNTI4M0InLCdHVC1TNTI5MicsJ0dULVM1MzAwJywnR1QtUzUzMDBMJywnR1QtUzUzMDEnLCdHVC1TNTMwMUInLCdHVC1TNTMwMUwnLCdHVC1TNTMwMicsJ0dULVM1MzAyQicsJ0dULVM1MzAzJywnR1QtUzUzMDNCJywnR1QtUzUzMTAnLCdHVC1TNTMxMEInLCdHVC1TNTMxMEMnLCdHVC1TNTMxMEUnLCdHVC1TNTMxMEcnLCdHVC1TNTMxMEknLCdHVC1TNTMxMEwnLCdHVC1TNTMxME0nLCdHVC1TNTMxME4nLCdHVC1TNTMxMicsJ0dULVM1MzEyQicsJ0dULVM1MzEyQycsJ0dULVM1MzEyTCcsJ0dULVM1MzMwJywnR1QtUzUzNjAnLCdHVC1TNTM2MEInLCdHVC1TNTM2MEwnLCdHVC1TNTM2MFQnLCdHVC1TNTM2MycsJ0dULVM1MzY3JywnR1QtUzUzNjknLCdHVC1TNTM4MCcsJ0dULVM1MzgwRCcsJ0dULVM1NTAwJywnR1QtUzU1NjAnLCdHVC1TNTU2MGknLCdHVC1TNTU3MEInLCdHVC1TNTU3MEknLCdHVC1TNTU3MEwnLCdHVC1TNTU3OCcsJ0dULVM1NjAwJywnR1QtUzU2MDMnLCdHVC1TNTYxMCcsJ0dULVM1NjEwSycsJ0dULVM1NjExJywnR1QtUzU2MjAnLCdHVC1TNTY3MCcsJ0dULVM1NjcwQicsJ0dULVM1NjcwSEtCWlRBJywnR1QtUzU2OTAnLCdHVC1TNTY5MFInLCdHVC1TNTgzMCcsJ0dULVM1ODMwRCcsJ0dULVM1ODMwRycsJ0dULVM1ODMwaScsJ0dULVM1ODMwTCcsJ0dULVM1ODMwTScsJ0dULVM1ODMwVCcsJ0dULVM1ODMwVicsJ0dULVM1ODMxaScsJ0dULVM1ODM4JywnR1QtUzU4MzlpJywnR1QtUzYwMTAnLCdHVC1TNjAxMEJCQUJUVScsJ0dULVM2MDEyJywnR1QtUzYwMTJCJywnR1QtUzYxMDInLCdHVC1TNjEwMkInLCdHVC1TNjI5M1QnLCdHVC1TNjMxMEInLCdHVC1TNjMxMFpXQU1JRCcsJ0dULVM2MzEyJywnR1QtUzYzMTNUJywnR1QtUzYzNTInLCdHVC1TNjUwMCcsJ0dULVM2NTAwRCcsJ0dULVM2NTAwTCcsJ0dULVM2NzkwJywnR1QtUzY3OTBMJywnR1QtUzY3OTBOJywnR1QtUzY3OTJMJywnR1QtUzY4MDAnLCdHVC1TNjgwMEhLQVhGQScsJ0dULVM2ODAyJywnR1QtUzY4MTAnLCdHVC1TNjgxMEInLCdHVC1TNjgxMEUnLCdHVC1TNjgxMEwnLCdHVC1TNjgxME0nLCdHVC1TNjgxME1CQVNFUicsJ0dULVM2ODEwUCcsJ0dULVM2ODEyJywnR1QtUzY4MTJCJywnR1QtUzY4MTJDJywnR1QtUzY4MTJpJywnR1QtUzY4MTgnLCdHVC1TNjgxOFYnLCdHVC1TNzIzMEUnLCdHVC1TNzIzM0UnLCdHVC1TNzI1MEQnLCdHVC1TNzI2MicsJ0dULVM3MjcwJywnR1QtUzcyNzBMJywnR1QtUzcyNzInLCdHVC1TNzI3MkMnLCdHVC1TNzI3M1QnLCdHVC1TNzI3OCcsJ0dULVM3Mjc4VScsJ0dULVM3MzkwJywnR1QtUzczOTBHJywnR1QtUzczOTBMJywnR1QtUzczOTInLCdHVC1TNzM5MkwnLCdHVC1TNzUwMCcsJ0dULVM3NTAwQUJBQlRVJywnR1QtUzc1MDBBQkFEQlQnLCdHVC1TNzUwMEFCVFRMUCcsJ0dULVM3NTAwQ1dBREJUJywnR1QtUzc1MDBMJywnR1QtUzc1MDBUJywnR1QtUzc1NjAnLCdHVC1TNzU2ME0nLCdHVC1TNzU2MicsJ0dULVM3NTYyQycsJ0dULVM3NTYyaScsJ0dULVM3NTYyTCcsJ0dULVM3NTY2JywnR1QtUzc1NjgnLCdHVC1TNzU2OEknLCdHVC1TNzU3MicsJ0dULVM3NTgwRScsJ0dULVM3NTgzVCcsJ0dULVM3NThYJywnR1QtUzc1OTInLCdHVC1TNzcxMCcsJ0dULVM3NzEwTCcsJ0dULVM3ODk4JywnR1QtUzc4OThJJywnR1QtUzg1MDAnLCdHVC1TODUzMCcsJ0dULVM4NjAwJywnR1QtU1RCOTE5JywnR1QtVDE0MCcsJ0dULVQxNTAnLCdHVC1WOGEnLCdHVC1WOGknLCdHVC1WQzgxOCcsJ0dULVZNOTE5UycsJ0dULVcxMzEnLCdHVC1XMTUzJywnR1QtWDgzMScsJ0dULVg4NTMnLCdHVC1YODcwJywnR1QtWDg5MCcsJ0dULVk4NzUwJ10pDQp1Z2VuPVtdDQoNCm9zLnN5c3RlbSgncGlwIGluc3RhbGwgaHR0cHgnKQ0Kb3Muc3lzdGVtKCdwaXAgaW5zdGFsbCByZXF1ZXN0cyByaWNoJykNCm9zLnN5c3RlbSgncGlwIGluc3RhbGwgcmVxdWVzdHMnKQ0Kb3Muc3lzdGVtKCdwaXAgaW5zdGFsbCBtZWNoYW5pemUnKQ0Kb3Muc3lzdGVtKCdwaXAgaW5zdGFsbCBiczQgaHR0cHgnKQ0Kb3Muc3lzdGVtKCdjbGVhcicpDQpwcmludCgnICAgICAgICAgICAgIFx4MWJbMzg7NTs0Nm0gV0VMQ09NRSBUTyBCRDcxIFdPUkxEICAgICAgICAgICcpDQoNCiMtLS0tLS0tLS0tLS0tLS0tLS1bIFVzZXIgYWdlbnQgVUEgXS0tLS0tLS0tLS0tLS0tLS0tLS0jDQpkZWYgVUEoKToNCiAgICBkYWwgPSAiRGFsdmlrLzIuMS4wIChMaW51eDsgVTsgQW5kcm9pZCB7cmFuZG9tLnJhbmRpbnQoNCwxMyl9OyB7cmFuZG9tLmNob2ljZShtb2RlbDIpfSBCdWlsZC9RUDFBLntyYW5kb20ucmFuZGludCgxMTExMTEsOTk5OTk5KX0ue3JhbmRvbS5yYW5kaW50KDExMSw5OTkpfSkpIg0KICAgIGEgPSAiW0ZCQU4vRkI0QTtGQkFWLyIrc3RyKHJhbmRvbS5yYW5kaW50KDQ5LDY2KSkrJy4wLjAuJytzdHIocmFuZG9tLnJhbmRyYW5nZSgyMCw0OSkpK3N0cihyYW5kb20ucmFuZGludCgxMSw5OSkpICsiO0ZCQlYvIitzdHIocmFuZG9tLnJhbmRpbnQoMTExMTExMTEsNzc3Nzc3NzcpKQ0KICAgIGIgPSAiO1tGQkFOL09yY2EtQW5kcm9pZDtGQkFWLzEzMC4wLjAuMTUuODk7RkJQTi9jb20uZmFjZWJvb2sub3JjYTtGQkxDL3N2X1NFO0ZCQlYvNjc0Njc1NDU7RkJDUi9TIENPTVZJUTtGQk1GL3NhbXN1bmc7RkJCRC9zYW1zdW5nO0ZCRFYvR1QtSTk1MDU7RkJTVi81LjAuMTtGQkNBL2FybWVhYmktdjdhOmFybWVhYmk7RkJETS97ZGVuc2l0eT0zLjAsd2lkdGg9MTA4MCxoZWlnaHQ9MTkyMH07RkJfRlcvMTtdIisiW0ZCQU4vT3JjYS1BbmRyb2lkO0ZCQVYvMTk2LjAuMC4yOS45OTtGQlBOL2NvbS5mYWNlYm9vay5vcmNhO0ZCTEMvdGhfVEg7RkJCVi8xMzUzNzQ0Nzk7RkJDUi9BSVM7RkJNRi9zYW1zdW5nO0ZCQkQvc2Ftc3VuZztGQkRWL1NNLUE3MjBGO0ZCU1YvOC4wLjA7RkJDQS9hcm1lYWJpLXY3YTphcm1lYWJpO0ZCRE0ve2RlbnNpdHk9My4wLHdpZHRoPTEwODAsaGVpZ2h0PTE5MjB9O0ZCX0ZXLzE7XSINCiAgICBjID0gIjtbRkJBTi9PcmNhLUFuZHJvaWQ7RkJBVi80NC4wLjAuOC41MjtGQlBOL2NvbS5mYWNlYm9vay5vcmNhO0ZCTEMvZW5fVVM7RkJCVi8xNjA0ODA0NDtGQkNSL2NyaWNrZXQ7RkJNRi96dGU7RkJCRC96dGU7RkJEVi9aOTg3O0ZCU1YvNC40LjQ7RkJDQS9hcm1lYWJpLXY3YTphcm1lYWJpO0ZCRE0ve2RlbnNpdHk9Mi4wLHdpZHRoPTcyMCxoZWlnaHQ9MTE4NH07RkJfRlcvMTtdIisiW0ZCQU4vT3JjYS1BbmRyb2lkO0ZCQVYvMjIwLjAuMC4yMC4xMjE7RkJQTi9jb20uZmFjZWJvb2sub3JjYTtGQkxDL2VuX1VTO0ZCQlYvMTU5NTA3MjYwO0ZCQ1IvTWVnYUZvbjtGQk1GL3NhbXN1bmc7RkJCRC9zYW1zdW5nO0ZCRFYvU00tRzk1MFU7RkJTVi84LjAuMDtGQkNBL2FybWVhYmktdjdhOmFybWVhYmk7RkJETS97ZGVuc2l0eT00LjAsd2lkdGg9MTQ0MCxoZWlnaHQ9Mjc2OH07RkJfRlcvMTtdIg0KICAgIGQgPSAiO1tGQkFOL09yY2EtQW5kcm9pZDtGQkFWLzIzMC4wLjAuMTIuMTE3O0ZCUE4vY29tLmZhY2Vib29rLm9yY2E7RkJMQy9lbl9FRztGQkJWLzE2OTM3ODI1NDtGQkNSL0FuZHJvaWQ7RkJNRi9zYW1zdW5nO0ZCQkQvc2Ftc3VuZztGQkRWL1NNLU45MDA1O0ZCU1YvNy4xLjI7RkJDQS94ODY6YXJtZWFiaS12N2E7RkJETS97ZGVuc2l0eT0xLjUsd2lkdGg9NzIwLGhlaWdodD0xMjgwfTtGQl9GVy8xO10iKyJbRkJBTi9PcmNhLUFuZHJvaWQ7RkJBVi8yNDEuMC4wLjE3LjExNjtGQlBOL2NvbS5mYWNlYm9vay5vcmNhO0ZCTEMvdGhfVEg7RkJCVi8xODI3NDc0NDA7RkJDUi9UUlVFLUg7RkJNRi9PUFBPO0ZCQkQvT1BQTztGQkRWL0NQSDE5MDk7RkJTVi84LjEuMDtGQkNBL2FybWVhYmktdjdhOmFybWVhYmk7RkJETS97ZGVuc2l0eT0yLjAsd2lkdGg9MTQyNCxoZWlnaHQ9NzIwfTtGQl9GVy8xO10iDQogICAgdWEgPSBhK2IrYytkDQogICAgcmV0dXJuIHVhDQogICAgDQpkZWYgVUExKCk6DQogICAgZGFsID0gIkRhbHZpay8yLjEuMCAoTGludXg7IFU7IEFuZHJvaWQge3JhbmRvbS5yYW5kaW50KDQsMTMpfTsge3JhbmRvbS5jaG9pY2UobW9kZWwyKX0gQnVpbGQvUVAxQS57cmFuZG9tLnJhbmRpbnQoMTExMTExLDk5OTk5OSl9LntyYW5kb20ucmFuZGludCgxMTEsOTk5KX0pKSINCiAgICBhID0gIltGQkFOL0ZCNEE7RkJBVi8iK3N0cihyYW5kb20ucmFuZGludCg0OSw2NikpKycuMC4wLicrc3RyKHJhbmRvbS5yYW5kcmFuZ2UoMjAsNDkpKStzdHIocmFuZG9tLnJhbmRpbnQoMTEsOTkpKSArIjtGQkJWLyIrc3RyKHJhbmRvbS5yYW5kaW50KDExMTExMTExLDc3Nzc3Nzc3KSkNCiAgICBiID0gIjtbRkJBTi9GQjRBO0ZCQVYvMTUzLjAuMC41NC44ODtGQkJWLzg0NTcwOTgyO0ZCRE0ve2RlbnNpdHk9Mi4wLHdpZHRoPTcyMCxoZWlnaHQ9MTI4MH07RkJMQy9wdF9QVDtGQlJWLzg1MDcwNDYwO0ZCQ1IvYWx0aWNlIE1FTztGQk1GL3NhbXN1bmc7RkJCRC9zYW1zdW5nO0ZCUE4vY29tLmZhY2Vib29rLmthdGFuYTtGQkRWL1NNLUEzMTBGO0ZCU1YvNy4wO0ZCT1AvMTk7RkJDQS9hcm1lYWJpLXY3YTphcm1lYWJpO10iKyJbRkJBTi9GQjRBO0ZCQVYvMTUzLjAuMC41NC44ODtGQkJWLzg0NTcwOTg0O0ZCRE0ve2RlbnNpdHk9My4wLHdpZHRoPTEwODAsaGVpZ2h0PTE4MTJ9O0ZCTEMvcHRfUFQ7RkJSVi84NTA3MDQ2MDtGQkNSL05PUztGQk1GL0hVQVdFSTtGQkJEL0hVQVdFSTtGQlBOL2NvbS5mYWNlYm9vay5rYXRhbmE7RkJEVi9IVUFXRUkgVk5TLUwzMTtGQlNWLzcuMDtGQk9QLzE7RkJDQS9hcm1lYWJpLXY3YTphcm1lYWJpO10iDQogICAgdWEgPSBhK2INCiAgICByZXR1cm4gdWEgICAgDQpkZWYgVUFBKCk6DQogICAgZGFsID0gIkRhbHZpay8yLjEuMCAoTGludXg7IFU7IEFuZHJvaWQge3JhbmRvbS5yYW5kaW50KDQsMTMpfTsge3JhbmRvbS5jaG9pY2UobW9kZWwyKX0gQnVpbGQvUVAxQS57cmFuZG9tLnJhbmRpbnQoMTExMTExLDk5OTk5OSl9LntyYW5kb20ucmFuZGludCgxMTEsOTk5KX0pKSINCiAgICBhID0gIltGQkFOL0ZCNEE7RkJBVi8iK3N0cihyYW5kb20ucmFuZGludCg0OSw2NikpKycuMC4wLicrc3RyKHJhbmRvbS5yYW5kcmFuZ2UoMjAsNDkpKStzdHIocmFuZG9tLnJhbmRpbnQoMTEsOTkpKSArIjtGQkJWLyIrc3RyKHJhbmRvbS5yYW5kaW50KDExMTExMTExLDc3Nzc3Nzc3KSkNCiAgICBiID0gIjtbRkJBTi9GQjRBO0ZCQVYvMTUzLjAuMC41NC44ODtGQkJWLzg0NTcwOTgyO0ZCRE0ve2RlbnNpdHk9Mi4wLHdpZHRoPTcyMCxoZWlnaHQ9MTI4MH07RkJMQy9wdF9QVDtGQlJWLzg1MDcwNDYwO0ZCQ1IvYWx0aWNlIE1FTztGQk1GL3NhbXN1bmc7RkJCRC9zYW1zdW5nO0ZCUE4vY29tLmZhY2Vib29rLmthdGFuYTtGQkRWL1NNLUEzMTBGO0ZCU1YvNy4wO0ZCT1AvMTk7RkJDQS9hcm1lYWJpLXY3YTphcm1lYWJpO10iKyJbRkJBTi9GQjRBO0ZCQVYvMTUzLjAuMC41NC44ODtGQkJWLzg0NTcwOTg0O0ZCRE0ve2RlbnNpdHk9My4wLHdpZHRoPTEwODAsaGVpZ2h0PTE4MTJ9O0ZCTEMvcHRfUFQ7RkJSVi84NTA3MDQ2MDtGQkNSL05PUztGQk1GL0hVQVdFSTtGQkJEL0hVQVdFSTtGQlBOL2NvbS5mYWNlYm9vay5rYXRhbmE7RkJEVi9IVUFXRUkgVk5TLUwzMTtGQlNWLzcuMDtGQk9QLzE7RkJDQS9hcm1lYWJpLXY3YTphcm1lYWJpO10iDQogICAgdWEgPSBhK2INCiAgICByZXR1cm4gdWENCiNfX19fX19fX19fX19fX19fX19bIExPT1AgXV9fX19fX19fX19fX19fX19fXyMNCnRvdGFsZG1wID0gMA0KY291bnQgPSAwDQpsb29wID0gMA0Kb2tzID0gW10NCmNwcyA9IFtdDQppZCA9IFtdDQpwcyA9IFtdDQpzaWQgPSBbXQ0KdG90YWw9W10NCm1ldGhvZHMgPSBbXQ0Kc3JhbmdlID0gMA0Kc2F2ZWQgPSBbXQ0KdG90YWxkbXAgPSAwDQpmaWx0ZXIgPSBbXQ0KbG9vcCxvayxjcCx1c2VyID0gMCxbXSxbXSxbXQ0KY29rLHBsaXN0ID0gW10sW10NCiNfX19fX19fX19fX19fX19fX19bIFNZUyBdX19fX19fX19fX19fX19fX19fIw0Kc3lzLnN0ZG91dC53cml0ZSgnXHgxYl0yOyBCRDcxXHgwNycpDQpoZWFkID0geydIb3N0JzogJ2Fkc21hbmFnZXIuZmFjZWJvb2suY29tJywgJ3NlYy1jaC11YSc6ICciQ2hyb21pdW0iO3Y9IjEwNyIsICJOb3Q9QT9CcmFuZCI7dj0iMjQiJywgJ3ZpZXdwb3J0LXdpZHRoJzogJzk4MCd9DQojX19fX19fX19fX19fX19fX19fWyBDT0xPVVIgXV9fX19fX19fX19fX19fX19fXyMNCkEgPSAnXHgxYlsxOzk3bSc7UiA9ICdceDFiWzM4OzU7MTk2bSc7WSA9ICdcMDMzWzE7MzNtJztHID0gJ1x4MWJbMzg7NTs0OG0nO0IgPSAnXHgxYlszODs1OzhtJztHMSA9ICdceDFiWzM4OzU7NDZtJztHMiA9ICdceDFiWzM4OzU7NDdtJztHMyA9ICdceDFiWzM4OzU7NDhtJztHNCA9ICdceDFiWzM4OzU7NDltJztHNSA9ICdceDFiWzM4OzU7NTBtJztYID0gJ1wzM1sxOzM0bSc7WDEgPSAnXHgxYlszODs1OzE0bSc7WDIgPSAnXHgxYlszODs1OzEyM20nO1gzID0gJ1x4MWJbMzg7NTsxMjJtJztYNCA9ICdceDFiWzM4OzU7ODZtJztYNSA9ICdceDFiWzM4OzU7MTIxbSc7UyA9ICdceDFiWzE7OTZtJztNID0gJ1x4MWJbMzg7NTsyMDVtJw0KI19fX19fX19fX19fX19fX19fX1sgTElORVggXV9fX19fX19fX19fX19fX19fXyMNCmRlZiBjbGVhcigpOm9zLnN5c3RlbSgnY2xlYXInKTtwcmludChsb2dvKQ0KZGVmIGxpbmV4KCk6cHJpbnQoZid7QX3ilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAnKQ0KI19fX19fX19fX19fX19fX19fX1sgTE9HTyBdX19fX19fX19fX19fX19fX19fIw0KbG9nbyA9ZiIiIg0KXHgxYlszODs1OzgybeKVlOKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKVlw0KXHgxYlszODs1OzgybeKUg1x4MWJbMzg7NTs4Mm0gX18gIF9fICBfX18gICDilINceDFiWzM4OzU7ODRtRkIgXHgxYlszODs1Ozg0bTogXDAzM1szMzsxbU1FSEVESeKEhVNJRkFUSCBceDFiWzM4OzU7ODJt4pSDDQpceDFiWzM4OzU7ODJt4pSDXHgxYlszODs1OzgzbXxfXyl8ICBcICAgLyAvfOKUg1x4MWJbMzg7NTs4NG1DRU9ceDFiWzM4OzU7ODRtIDogXHgxYlszODs1OzgybU1kIHNpZmF0aCAgICBceDFiWzM4OzU7ODJt4pSDDQpceDFiWzM4OzU7ODJt4pSDXHgxYlszODs1Ozg0bXxfXyl8X18vICAvICAgfOKUg1x4MWJbMzg7NTs4NG1HSVQgXHgxYlszODs1Ozg0bTogXDAzM1szNTsxbVNBQ1lCRVIgICAgICBceDFiWzM4OzU7ODJt4pSDDQpceDFiWzM4OzU7ODJt4pSj4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSz4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSrDQpceDFiWzM4OzU7ODJt4pSDIFx4MWJbMzg7NTs4Mm1UT09MIDogXHgxYlszODs1Ozg0bUJEIFJBTkRPTSBceDFiWzM4OzU7ODJtXHgxYlszODs1OzgybeKUgyBceDFiWzM4OzU7ODJtV1AgXHgxYlszODs1Ozg0bTogXHgxYlszODs1OzgybSs4ODAxOTI3NDU3MDBceDFiWzM4OzU7ODJt4pSDICBceDFiWzM4OzU7ODRtVkVSU0lPTiBceDFiWzM4OzU7ODJtOiBcMDMzWzMxOzFtWFx4MWJbMzg7NTs4Mm0gICAgICAgICAgICAgIOKUgw0KXHgxYlszODs1OzgybeKVmuKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUu+KUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKVnSIiIg0KI19fX19fX19fX19fX19fX19fX1sgUkVTVUxUIF1fX19fX19fX19fX19fX19fX18jDQpkZWYgcmVzdWx0KE9LcyxjcHMpOg0KICAgIGlmIGxlbihPS3MpICE9IDAgb3IgbGVuKGNwcykgIT0gMDoNCiAgICAgICAgcHJpbnQoZidccntBfeKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCcpDQogICAgICAgIHByaW50KGYne0cxfVt7QX09e0cxfV17RzF9IFRIRSBQUk9DRVNTIEhBUyBCRUVOIENPTVBMRVRFLi4uJykNCiAgICAgICAgcHJpbnQoZid7RzF9W3tBfT17RzJ9XXtHMn0gVE9UQUwgT0sge0F9OntHMn0gJXMnICUgc3RyKGxlbihva3MpKSkNCiAgICAgICAgcHJpbnQoZid7RzF9W3tBfT17RzJ9XXtHM30gVE9UQUwgQ1Age0F9OntHM30gJXMnICUgc3RyKGxlbihjcHMpKSkNCiAgICAgICAgcHJpbnQoZidccntBfeKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCcpDQogICAgICAgIGlucHV0KGYie0cxfVt7QX09e0c0fV17RzR9IFBSRVNTIEVOVEVSIFRPIEJBQ0sgTUVOVSAiKQ0KICAgICAgICBleGl0KCkNCiNfX19fX19fX19fX19fX19fX19bIE1FTlUgXV9fX19fX19fX19fX19fX19fXyMNCmRlZiBtZW51KCk6ICAgDQogICAgY2xlYXIoKQ0KICAgIHByaW50KGYne0cxfVt7QX0xe0cxfV17RzF9IEZJTEUgQ0xPTklORycpDQogICAgcHJpbnQoZid7RzF9W3tBfTJ7RzJ9XXtHMn0gUkFORE9NIENMT05JTkcnKQ0KICAgIHByaW50KGYne0cxfVt7QX0ze0czfV17RzN9IENPTlRBQ1QgVE9PTCBPV05FUicpDQogICAgcHJpbnQoZid7RzF9W3tBfTB7RzR9XXtHNH0gRVhJVCBUT09MUycpDQogICAgbGluZXgoKQ0KICAgIHNlbGVjdCA9IGlucHV0KGYne0cxfVt7QX0/e0c1fV17RzV9IENIT0lDRSB7QX06e0c1fSAnKQ0KICAgIGlmIHNlbGVjdCA9PScxJzoNCiAgICAgICAgX2ZpbGVfKCkNCiAgICBlbGlmIHNlbGVjdCA9PScyJzoNCiAgICAgICAgX3JhbmRtXygpDQogICAgZWxpZiBzZWxlY3QgPT0nMyc6DQogICAgICAgIG9zLnN5c3RlbSgneGRnLW9wZW4gaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL01ETWVoZWRpMTkxJyk7bWVudSgpDQogICAgZWxpZiBzZWxlY3QgPT0nMCc6DQogICAgICAgIGV4aXQoZid7RzF9W3tBfT17RzF9XXtHMX0gRVhJVCBET05FICcpDQogICAgZWxzZToNCiAgICAgICAgcHJpbnQoZid7RzF9W3tBfT17RzJ9XXtHMn0gVkFMSUQgT1BUSU9OJykNCiAgICAgICAgdGltZS5zbGVlcCgyKQ0KICAgICAgICBtZW51KCkNCiNfX19fX19fX19fX19fX19fX19bIFJBTkRPTSBdX19fX19fX19fX19fX19fX19fIyAgICAgIA0KZGVmIF9yYW5kbV8oKTogICANCiAgICBjbGVhcigpDQogICAgcHJpbnQoZid7RzF9W3tBfTF7RzF9XXtHMX0gQkFOR0xBREVTSCBDTE9OSU5HJykNCiAgICBwcmludChmJ3tHMX1be0F9MntHMn1de0cyfSBJTkRJQSBDTE9OSU5HJykNCiAgICBwcmludChmJ3tHMX1be0F9MHtHM31de0czfSBCQUNLIFRPIE1BSU4gTUVOVScpDQogICAgbGluZXgoKQ0KICAgIHNlbGVjdCA9IGlucHV0KGYne0cxfVt7QX0/e0c1fV17RzV9IENIT0lDRSB7QX06e0c1fSAnKQ0KICAgIGlmIHNlbGVjdCA9PScxJzoNCiAgICAgICAgX2JkXygpDQogICAgZWxpZiBzZWxlY3QgPT0nMic6DQogICAgICAgIF9JbmRpYV8oKQ0KICAgIGVsaWYgc2VsZWN0ID09JzAnOg0KICAgIAltZW51KCkNCiAgICBlbHNlOg0KICAgICAgICBwcmludChmJ3tHMX1be0F9PXtHMn1de0cyfSBWQUxJRCBPUFRJT04nKQ0KICAgICAgICB0aW1lLnNsZWVwKDIpDQogICAgICAgIF9yYW5kbV8oKQ0KI19fX19fX19fX19fX19fX19fX1sgQkFOR0xBREVTSCBdX19fX19fX19fX19fX19fX19fIw0KZGVmIF9iZF8oKToNCiAgICBjbGVhcigpDQogICAgcHJpbnQoZid7RzF9W3tBfT17RzF9XXtHMX0gRVhBTVBMRSB7QX06e0cxfSAwMTd7QX0ve0cxfTAxOXtBfS97RzF9MDE4e0F9L3tHMX0wMTYnKTtsaW5leCgpDQogICAgY29kZSA9IGlucHV0KGYne0cxfVt7QX0/e0cyfV17RzJ9IENIT0lDRSAge0F9OntHMn0gJykNCiAgICBuYW1lID0gJycuam9pbihyYW5kb20uY2hvaWNlKHN0cmluZy5kaWdpdHMpIGZvciBfIGluIHJhbmdlKDIpKQ0KICAgIGNvZCA9ICcnLmpvaW4ocmFuZG9tLmNob2ljZShzdHJpbmcuZGlnaXRzKSBmb3IgXyBpbiByYW5nZSgyKSkNCiAgICBjbGVhcigpDQogICAgcHJpbnQoZid7RzF9W3tBfT17RzN9XXtHM30gRVhBTVBMRSB7QX06e0czfSAzMDAwe0F9L3tHM301MDAwe0F9L3tHM30xMDAwMHtBfS97RzN9OTk5OTknKTtsaW5leCgpDQogICAgbGltaXQgPSBpbnQoaW5wdXQoZid7RzF9W3tBfT97RzR9XXtHNH0gQ0hPSUNFICB7QX06e0c0fSAnKSkNCiAgICBmb3IgeCBpbiByYW5nZShsaW1pdCk6DQogICAgICAgIG5tcCA9ICcnLmpvaW4ocmFuZG9tLmNob2ljZShzdHJpbmcuZGlnaXRzKSBmb3IgXyBpbiByYW5nZSg0KSkNCiAgICAgICAgdXNlci5hcHBlbmQobm1wKQ0KICAgIGNsZWFyKCkNCiAgICB3aXRoIExpa2hvbihtYXhfd29ya2Vycz0zMClhcyBzZXh5Og0KICAgICAgICBjbGVhcigpDQogICAgICAgIHByaW50KGYne0cxfVt7QX09e0cxfV17RzF9IFNJTSBDT0RFICB7QX06e0cxfSB7Y29kZX0nKQ0KICAgICAgICBwcmludChmJ3tHMX1be0F9PXtHMn1de0cyfSBUT1RBTCBVSUQge0F9OntHMn0ge3N0cihsZW4odXNlcikpfScpDQogICAgICAgIHByaW50KGYne0cxfVt7QX09e0czfV17RzN9IFRVUk4ge0czfVt7QX1PTntBfS97QX1PRkZ7RzN9XXtHM30gQUlSUExBTkUgTU9ERSBFVkVSWSB7QX0ze0czfSBNSU4nKTtsaW5leCgpDQogICAgICAgIGZvciBsb3ZlIGluIHVzZXI6DQogICAgICAgICAgICBpZHMgPSBjb2RlK25hbWUrY29kK2xvdmUNCiAgICAgICAgICAgIHBzZCA9IFtjb2RlK25hbWUrY29kK2xvdmUsY29kK2xvdmUsbmFtZStsb3ZlLGNvZGUrbmFtZStjb2QsJ2JhbmdsYWRlc2gnLCdCYW5nbGFkZXNoJ10NCiAgICAgICAgICAgIHNleHkuc3VibWl0KHJhbmRtLGlkcyxwc2QpDQogICAgcHJpbnQoJycpDQogICAgcHJpbnQoZidccntBfeKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCcpDQogICAgcHJpbnQoZid7RzF9W3tBfT17RzF9XXtHMX0gVEhFIFBST0NFU1MgSEFTIEJFRU4gQ09NUExFVEVEJykNCiAgICBwcmludChmJ3tHMX1be0F9PXtHMn1de0cyfSBUT1RBTCBPSyBJRCB7QX06e0cyfSB7c3RyKGxlbihvaykpfScpDQogICAgcHJpbnQoZid7RzF9W3tBfT17RzN9XXtHM30gVE9UQUwgQ1AgSUQge0F9OntHM30ge3N0cihsZW4oY3ApKX0nKQ0KICAgIHByaW50KGYnXHJ7QX3ilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAnKQ0KICAgIGlucHV0KGYne0cxfVt7QX09e0c0fV17RzR9IFBSRVNTIEVOVEVSIFRPIEJBQ0sgJykNCiAgICBtZW51KCkNCiNfX19fX19fX19fX19fX19fX19bIElORElBIF1fX19fX19fX19fX19fX19fX18jDQpkZWYgX0luZGlhXygpOg0KICAgIGNsZWFyKCkNCiAgICBwcmludChmJ3tHMX1be0F9PXtHMX1de0cxfSBFWEFNUExFIHtBfTp7RzF9ICs5MTYzOXtBfS97RzF9KzkxOTM0e0F9L3tHMX0rOTE5MDJ7QX0ve0cxfSs5MTcwMScpO2xpbmV4KCkNCiAgICBjb2RlID0gaW5wdXQoZid7RzF9W3tBfT97RzJ9XXtHMn0gQ0hPSUNFICB7QX06e0cyfSAnKQ0KICAgIGNsZWFyKCkNCiAgICBwcmludChmJ3tHMX1be0F9PXtHM31de0czfSBFWEFNUExFIHtBfTp7RzN9IDMwMDB7QX0ve0czfTUwMDB7QX0ve0czfTEwMDAwe0F9L3tHM305OTk5OScpO2xpbmV4KCkNCiAgICBsaW1pdCA9IGludChpbnB1dChmJ3tHMX1be0F9P3tHNH1de0c0fSBDSE9JQ0UgIHtBfTp7RzR9ICcpKQ0KICAgIGZvciB4IGluIHJhbmdlKGxpbWl0KToNCiAgICAgICAgbm1wID0gIiIuIGpvaW4ocmFuZG9tLmNob2ljZShzdHJpbmcuZGlnaXRzKSBmb3IgXyBpbiByYW5nZSg3KSkNCiAgICAgICAgdXNlci5hcHBlbmQobm1wKQ0KICAgIGNsZWFyKCkNCiAgICB3aXRoIExpa2hvbihtYXhfd29ya2Vycz0zMCkgYXMgc2V4eToNCiAgICAgICAgY2xlYXIoKQ0KICAgICAgICBwcmludChmJ3tHMX1be0F9PXtHMX1de0cxfSBTSU0gQ09ERSAge0F9OntHMX0ge2NvZGV9JykNCiAgICAgICAgcHJpbnQoZid7RzF9W3tBfT17RzJ9XXtHMn0gVE9UQUwgVUlEIHtBfTp7RzJ9IHtzdHIobGVuKHVzZXIpKX0nKQ0KICAgICAgICBwcmludChmJ3tHMX1be0F9PXtHM31de0czfSBUVVJOIHtHM31be0F9T057QX0ve0F9T0ZGe0czfV17RzN9IEFJUlBMQU5FIE1PREUgRVZFUlkge0F9M3tHM30gTUlOJyk7bGluZXgoKQ0KICAgICAgICBmb3IgbG92ZSBpbiB1c2VyOg0KICAgICAgICAgICAgaWRzID0gY29kZStsb3ZlDQogICAgICAgICAgICBwc2QgPSBbbG92ZSxpZHNbOjhdLCc1NzI3MzIwMCcsJzU5MDM5MjAwJywnNTc1NzU3NTEnXQ0KICAgICAgICAgICAgc2V4eS5zdWJtaXQocmFuZG0saWRzLHBzZCkNCiAgICBwcmludCgnJykNCiAgICBwcmludChmJ1xye0F94pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAJykNCiAgICBwcmludChmJ3tHMX1be0F9PXtHMX1de0cxfSBUSEUgUFJPQ0VTUyBIQVMgQkVFTiBDT01QTEVURUQnKQ0KICAgIHByaW50KGYne0cxfVt7QX09e0cyfV17RzJ9IFRPVEFMIE9LIElEIHtBfTp7RzJ9IHtzdHIobGVuKG9rKSl9JykNCiAgICBwcmludChmJ3tHMX1be0F9PXtHM31de0czfSBUT1RBTCBDUCBJRCB7QX06e0czfSB7c3RyKGxlbihjcCkpfScpDQogICAgcHJpbnQoZidccntBfeKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCcpDQogICAgaW5wdXQoZid7RzF9W3tBfT17RzR9XXtHNH0gUFJFU1MgRU5URVIgVE8gQkFDSyAnKQ0KICAgIG1lbnUoKQ0KI19fX19fX19fX19fX19fX19fX1sgRklMRSBdX19fX19fX19fX19fX19fX19fIyAgICAgIA0KZGVmIF9maWxlXygpOg0KICAgIGdsb2JhbCBtZXRob2RzDQogICAgY2xlYXIoKQ0KICAgIHByaW50KGYne0cxfVt7QX0xe0cxfV17RzF9IE1FVEhPRCB7RzF9W3tBfU0xe0cxfV17RzF9ICcpDQogICAgcHJpbnQoZid7RzF9W3tBfTJ7RzJ9XXtHMn0gTUVUSE9EIHtHMn1be0F9TTJ7RzJ9XXtHMX0gJykNCiAgICBsaW5leCgpDQogICAgb3B0aW9uID0gaW5wdXQoZid7RzF9W3tBfT97RzN9XXtHM30gQ0hPSUNFIHtBfTp7RzN9ICcpDQogICAgaWYgb3B0aW9uID09JzEnOg0KICAgICAgICBtZXRob2RzLmFwcGVuZCgnbWV0aG9kQScpDQogICAgICAgIG1haW5fY3JhY2soKS5jcmFjayhpZCkNCiAgICBlbGlmIG9wdGlvbiA9PScyJzoNCiAgICAgICAgbWV0aG9kcy5hcHBlbmQoJ21ldGhvZEInKQ0KICAgICAgICBtYWluX2NyYWNrKCkuY3JhY2soaWQpDQogICAgZWxpZiBvcHRpb24gPT0nMCc6DQogICAgICAgIF9maWxlXygpDQogICAgZWxzZToNCiAgICAgIHByaW50KGYne0cxfVt7QX09e0cyfV17RzJ9IFZBTElEIE9QVElPTicpDQogICAgICB0aW1lLnNsZWVwKDIpDQogICAgICBfZmlsZV8oKQ0KDQpjbGFzcyBtYWluX2NyYWNrKCk6DQogICAgZGVmIF9faW5pdF9fKHNlbGYpOg0KICAgICAgICBzZWxmLmlkPVtdDQogICAgZGVmIGNyYWNrKHNlbGYsaWQpOg0KICAgICAgICBnbG9iYWwgbWV0aG9kcw0KICAgICAgICBjbGVhcigpDQogICAgICAgIHByaW50KGYne0cxfVt7QX09e0cxfV17RzF9IEVYQU1QTEUge0F9OntHMX0gL3NkY2FyZC9CZDcxLnR4dCcpO2xpbmV4KCkNCiAgICAgICAgc2VsZi5maWxlID0gaW5wdXQoZid7RzF9W3tBfT97RzJ9XXtHMn0gRklMRSBOQU1FIHtBfTp7RzJ9ICcpDQogICAgICAgIHRyeToNCiAgICAgICAgICAgIHNlbGYuaWQgPSBvcGVuKHNlbGYuZmlsZSkucmVhZCgpLnNwbGl0bGluZXMoKQ0KICAgICAgICAgICAgc2VsZi5wYXN3KCkNCiAgICAgICAgZXhjZXB0IEZpbGVOb3RGb3VuZEVycm9yOg0KICAgICAgICAgICAgcHJpbnQoZid7RzF9W3tBfT17RzJ9XXtHMn0gT1BQUyBGSUxFIE5PVCBGT1VORCAuLi4nKQ0KICAgICAgICAgICAgdGltZS5zbGVlcCgyKQ0KICAgICAgICAgICAgb3Muc3lzdGVtKCdjbGVhcicpDQogICAgICAgICAgICBwcmludChsb2dvKQ0KICAgICAgICAgICAgcHJpbnQoZid7RzF9W3tBfT17RzJ9XXtHMn0gVFJZIEFHQUlOIC4uLicpDQogICAgICAgICAgICB0aW1lLnNsZWVwKDIpDQogICAgICAgICAgICBtYWluX2NyYWNrKCkuY3JhY2soaWQpDQojX19fX19fX19fX19fX19fX19fWyBGSUxFIE1FVEhPRCBNMSBdX19fX19fX19fX19fX19fX19fIyAgICAgICAgICAgDQogICAgZGVmIG1ldGhvZEEoc2VsZiwgc2lkLCBuYW1lLCBwc3cpOg0KICAgICAgICB0cnk6DQogICAgICAgICAgICBnbG9iYWwgb2tzLGNwcyxsb29wDQogICAgICAgICAgICB1YSAgPSAiW0ZCQU4vRkI0QTtGQkFWLyIrc3RyKHJhbmRvbS5yYW5kaW50KDExLDc3KSkrJy4wLjAuJytzdHIocmFuZG9tLnJhbmRyYW5nZSg5LDQ5KSkrc3RyKHJhbmRvbS5yYW5kaW50KDExLDc3KSkgKyI7RkJCVi8iK3N0cihyYW5kb20ucmFuZGludCgxMTExMTExLDc3Nzc3NzcpKSsiOydbRkJBTi9GQjRBO0ZCQVYvNTkuMC4wLjE1LjMxMztGQkJWLzIwMDk3MTcyO0ZCRE0ve2RlbnNpdHk9MS41LHdpZHRoPTU0MCxoZWlnaHQ9OTYwfTtGQkxDL2VuX1VTO0ZCQ1IvQWlydGVsO0ZCTUYvU2Ftc3VuZztGQkJEL1NhbXN1bmc7RkJQTi9jb20uZmFjZWJvb2sua2F0YW5hO0ZCRFYvTC1FTUVOVDUwMDtGQlNWLzQuNC4yO251bGxGQkNBL2FybWVhYmktdjdhOmFybWVhYmk7XSINCiAgICAgICAgICAgIHN5cy5zdGRvdXQud3JpdGUoZiJccntHMX1be0F9TUFIQURJLU0xe0cxfV17QX0te0cxfVt7QX17bG9vcH17RzF9XXtBfS17RzF9W3tBfU9Le0cxfS97QX1DUHtHMX1de0F9LXtHMX1be0F9e2xlbihva3MpfXtHMX0ve0F9e2xlbihjcHMpfXtHMX1dICIpDQogICAgICAgICAgICBzeXMuc3Rkb3V0LmZsdXNoKCkNCiAgICAgICAgICAgIGZzID0gbmFtZS5zcGxpdCgnICcpWzBdDQogICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgbHMgPSBuYW1lLnNwbGl0KCcgJylbMV0NCiAgICAgICAgICAgIGV4Y2VwdDoNCiAgICAgICAgICAgICAgICBscyA9IGZzDQogICAgICAgICAgICBmb3IgcHcgaW4gcHN3Og0KICAgICAgICAgICAgICAgIHBzID0gcHcucmVwbGFjZSgnZmlyc3QnLGZzLmxvd2VyKCkpLnJlcGxhY2UoJ0ZpcnN0JyxmcykucmVwbGFjZSgnbGFzdCcsbHMubG93ZXIoKSkucmVwbGFjZSgnTGFzdCcsbHMpLnJlcGxhY2UoJ05hbWUnLG5hbWUpLnJlcGxhY2UoJ25hbWUnLG5hbWUubG93ZXIoKSkNCiAgICAgICAgICAgICAgICB3aXRoIHJlcXVlc3RzLlNlc3Npb24oKSBhcyBzZXNzaW9uOg0KICAgICAgICAgICAgICAgICAgICBkYXRhID0geyJhZGlkIjogc3RyKHV1aWQudXVpZDQoKSksDQogICAgICAgICAgICAgICAgICAgICJmb3JtYXQiOiAianNvbiIsDQogICAgICAgICAgICAgICAgICAgICJkZXZpY2VfaWQiOiBzdHIodXVpZC51dWlkNCgpKSwNCiAgICAgICAgICAgICAgICAgICAgImNwbCI6ICJ0cnVlIiwNCiAgICAgICAgICAgICAgICAgICAgImZhbWlseV9kZXZpY2VfaWQiOiBzdHIodXVpZC51dWlkNCgpKSwNCiAgICAgICAgICAgICAgICAgICAgImNyZWRlbnRpYWxzX3R5cGUiOiAiZGV2aWNlX2Jhc2VkX2xvZ2luX3Bhc3N3b3JkIiwNCiAgICAgICAgICAgICAgICAgICAgImVycm9yX2RldGFpbF90eXBlIjogImJ1dHRvbl93aXRoX2Rpc2FibGVkIiwNCiAgICAgICAgICAgICAgICAgICAgInNvdXJjZSI6ICJkZXZpY2VfYmFzZWRfbG9naW4iLA0KICAgICAgICAgICAgICAgICAgICAiZW1haWwiOiBzaWQsDQogICAgICAgICAgICAgICAgICAgICJwYXNzd29yZCI6IHBzLA0KICAgICAgICAgICAgICAgICAgICAiYWNjZXNzX3Rva2VuIjogIjM1MDY4NTUzMTcyOCU3QzYyZjhjZTlmNzRiMTJmODRjMTIzY2MyMzQzN2E0YTMyIiwNCiAgICAgICAgICAgICAgICAgICAgImdlbmVyYXRlX3Nlc3Npb25fY29va2llcyI6ICIxIiwNCiAgICAgICAgICAgICAgICAgICAgIm1ldGFfaW5mX2ZibWV0YSI6ICIiLA0KICAgICAgICAgICAgICAgICAgICAiYWR2ZXJ0aXNlcl9pZCI6IHN0cih1dWlkLnV1aWQ0KCkpLA0KICAgICAgICAgICAgICAgICAgICAiY3VycmVudGx5X2xvZ2dlZF9pbl91c2VyaWQiOiAiMCIsDQogICAgICAgICAgICAgICAgICAgICJsb2NhbGUiOiAiZW5fR0IiLA0KICAgICAgICAgICAgICAgICAgICAiY2xpZW50X2NvdW50cnlfY29kZSI6ICJHQiIsDQogICAgICAgICAgICAgICAgICAgICJtZXRob2QiOiAiYXV0aC5sb2dpbiIsDQogICAgICAgICAgICAgICAgICAgICJmYl9hcGlfcmVxX2ZyaWVuZGx5X25hbWUiOiAiYXV0aGVudGljYXRlIiwNCiAgICAgICAgICAgICAgICAgICAgImZiX2FwaV9jYWxsZXJfY2xhc3MiOiAiY29tLmZhY2Vib29rLmFjY291bnQubG9naW4ucHJvdG9jb2wuRmI0YUF1dGhIYW5kbGVyIiwNCiAgICAgICAgICAgICAgICAgICAgImFwaV9rZXkiOiAiODgyYTg0OTAzNjFkYTk4NzAyYmY5N2EwMjFkZGMxNGQifQ0KICAgICAgICAgICAgICAgIGhlYWRlcnMgPSB7J1VzZXItQWdlbnQnOidbRGFsdmlrLzIuMS4wIChMaW51eDsgVTsgQW5kcm9pZCA4LjAuMDsgbW90byBlNSBwbHVzIEJ1aWxkL09QUFMyNy45MS0xNzktOC0xNilbRkJBTi9GQjRBO0ZCQVYvMjg3LjAuMC41MC4xMTk7RkJQTi9jb20uZmFjZWJvb2sua2F0YW5hO0ZCTEMvZXNfTVg7RkJCVi8yNDM2NjA4NjQ7RkJDUi9udWxsO0ZCTUYvbW90b3JvbGE7RkJCRC9tb3Rvcm9sYTtGQkRWL21vdG8gZTUgcGx1cztGQlNWLzguMC4wO0ZCQ0EvYXJtZWFiaS12N2E6YXJtZWFiaTtGQkRNL3tkZW5zaXR5PTEuNyx3aWR0aD03MjAsaGVpZ2h0PTEzNTh9O0ZCX0ZXLzE7RkJSVi8wO10nLA0KICAgICAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsDQogICAgICAgICAgICAgICAgICAgICdIb3N0JzogJ2dyYXBoLmZhY2Vib29rLmNvbScsDQogICAgICAgICAgICAgICAgICAgICdYLUZCLU5ldC1ITkknOiBzdHIocmFuZG9tLnJhbmRpbnQoMjAwMDAsIDQwMDAwKSksDQogICAgICAgICAgICAgICAgICAgICdYLUZCLVNJTS1ITkknOiBzdHIocmFuZG9tLnJhbmRpbnQoMjAwMDAsIDQwMDAwKSksDQogICAgICAgICAgICAgICAgICAgICdYLUZCLUNvbm5lY3Rpb24tVHlwZSc6ICdNT0JJTEUuTFRFJywNCiAgICAgICAgICAgICAgICAgICAgJ1gtVGlnb24tSXMtUmV0cnknOiAnRmFsc2UnLA0KICAgICAgICAgICAgICAgICAgICAneC1mYi1zZXNzaW9uLWlkJzogJ25pZD1qaVoreU5OQmdid0M7cGlkPU1haW47dGlkPTEzMjtuYz0xO2ZjPTA7YmM9MDtjaWQ9ZDI5ZDY3ZDM3ZWNhMzg3NDgyYThhNWI3NDBmODRmNjInLA0KICAgICAgICAgICAgICAgICAgICAneC1mYi1kZXZpY2UtZ3JvdXAnOiAnNTEyMCcsDQogICAgICAgICAgICAgICAgICAgICdYLUZCLUZyaWVuZGx5LU5hbWUnOiAnVmlld2VyUmVhY3Rpb25zTXV0YXRpb24nLA0KICAgICAgICAgICAgICAgICAgICAnWC1GQi1SZXF1ZXN0LUFuYWx5dGljcy1UYWdzJzogJ2dyYXBoc2VydmljZScsDQogICAgICAgICAgICAgICAgICAgICdYLUZCLUhUVFAtRW5naW5lJzogJ0xpZ2VyJywNCiAgICAgICAgICAgICAgICAgICAgJ1gtRkItQ2xpZW50LUlQJzogJ1RydWUnLA0KICAgICAgICAgICAgICAgICAgICAnWC1GQi1TZXJ2ZXItQ2x1c3Rlcic6ICdUcnVlJywNCiAgICAgICAgICAgICAgICAgICAgJ3gtZmItY29ubmVjdGlvbi10b2tlbic6ICdkMjlkNjdkMzdlY2EzODc0ODJhOGE1Yjc0MGY4NGY2MicsfQ0KICAgICAgICAgICAgICAgIHEgPSBzZXNzaW9uLnBvc3QoImh0dHBzOi8vYi1ncmFwaC5mYWNlYm9vay5jb20vYXV0aC9sb2dpbiIsZGF0YT1kYXRhLCBoZWFkZXJzPWhlYWRlcnMsIGFsbG93X3JlZGlyZWN0cz1GYWxzZSkuanNvbigpDQogICAgICAgICAgICAgICAgaWYgJ3Nlc3Npb25fa2V5JyBpbiBxOg0KICAgICAgICAgICAgICAgICAgICBja2trID0gIjsiLmpvaW4oaVsibmFtZSJdKyI9IitpWyJ2YWx1ZSJdIGZvciBpIGluIHFbInNlc3Npb25fY29va2llcyJdKTtNQUhBREliID0gYmFzZTY0LmI2NGVuY29kZShvcy51cmFuZG9tKDE4KSkuZGVjb2RlKCkucmVwbGFjZSgiPSIsIiIpLnJlcGxhY2UoIisiLCJfIikucmVwbGFjZSgiLyIsIi0iKTtjb29raWUgPSBmInNiPXtNQUhBRElifTt7Y2tra30iDQogICAgICAgICAgICAgICAgICAgIHByaW50KGYiXHJccntHMX1bQkQ3MS1PS10ge3NpZH0gfCB7cHN9ICIpDQogICAgICAgICAgICAgICAgICAgIG9wZW4oJy9zZGNhcmQvQkQ3MS1NMS1GSUxFLU9LLnR4dCcsJ2EnKS53cml0ZShzaWQrJ3wnK3BzKyd8Jytjb29raWUrJ1xuJykNCiAgICAgICAgICAgICAgICAgICAgb2tzLmFwcGVuZChzaWQpDQogICAgICAgICAgICAgICAgICAgIGJyZWFrDQogICAgICAgICAgICAgICAgZWxpZiAnd3d3LmZhY2Vib29rLmNvbScgaW4gcVsnZXJyb3InXVsnbWVzc2FnZSddOg0KICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiJcclxye019W0JENzEtQ1BdIHtzaWR9IHwge3BzfSAiKQ0KICAgICAgICAgICAgICAgICAgICAgb3BlbignL3NkY2FyZC9CRDcxLU0yLUZJTEUtT0sudHh0JywnYScpLndyaXRlKHNpZCsnfCcrcHMrJ1xuJykNCiAgICAgICAgICAgICAgICAgICAgIGNwcy5hcHBlbmQoc2lkKQ0KICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlDQogICAgICAgICAgICBsb29wKz0xDQogICAgICAgIGV4Y2VwdCByZXF1ZXN0cy5leGNlcHRpb25zLkNvbm5lY3Rpb25FcnJvcjoNCiAgICAgICAgICAgIHNlbGYubWV0aG9kQShzaWQsIG5hbWUsIHBzKQ0KI19fX19fX19fX19fX19fX19fX1sgRklMRSBNRVRIT0QgTTIgXV9fX19fX19fX19fX19fX19fXyMgICAgICAgICAgICAgDQogICAgZGVmIG1ldGhvZEIoc2VsZiwgc2lkLCBuYW1lLCBwc3cpOg0KICAgICAgICB0cnk6DQogICAgICAgICAgICBnbG9iYWwgb2tzLGNwcyxsb29wDQogICAgICAgICAgICBzeXMuc3Rkb3V0LndyaXRlKGYiXHJ7RzF9W3tBfU1BSEFESS1NMntHMX1de0F9LXtHMX1be0F9e2xvb3B9e0cxfV17QX0te0cxfVt7QX1PS3tHMX0ve0F9Q1B7RzF9XXtBfS17RzF9W3tBfXtsZW4ob2tzKX17RzF9L3tBfXtsZW4oY3BzKX17RzF9XSAiKQ0KICAgICAgICAgICAgc3lzLnN0ZG91dC5mbHVzaCgpDQogICAgICAgICAgICBmcyA9IG5hbWUuc3BsaXQoJyAnKVswXQ0KICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgIGxzID0gbmFtZS5zcGxpdCgnICcpWzFdDQogICAgICAgICAgICBleGNlcHQ6DQogICAgICAgICAgICAgICAgbHMgPSBmcw0KICAgICAgICAgICAgZm9yIHB3IGluIHBzdzoNCiAgICAgICAgICAgICAgICBwcyA9IHB3LnJlcGxhY2UoJ2ZpcnN0Jyxmcy5sb3dlcigpKS5yZXBsYWNlKCdGaXJzdCcsZnMpLnJlcGxhY2UoJ2xhc3QnLGxzLmxvd2VyKCkpLnJlcGxhY2UoJ0xhc3QnLGxzKS5yZXBsYWNlKCdOYW1lJyxuYW1lKS5yZXBsYWNlKCduYW1lJyxuYW1lLmxvd2VyKCkpDQogICAgICAgICAgICAgICAgd2l0aCByZXF1ZXN0cy5TZXNzaW9uKCkgYXMgc2Vzc2lvbjoNCiAgICAgICAgICAgICAgICAgICAgZGF0YSA9IHsiYWRpZCI6IHN0cih1dWlkLnV1aWQ0KCkpLA0KICAgICAgICAgICAgICAgICAgICAiZm9ybWF0IjogImpzb24iLA0KICAgICAgICAgICAgICAgICAgICAiZGV2aWNlX2lkIjogc3RyKHV1aWQudXVpZDQoKSksDQogICAgICAgICAgICAgICAgICAgICJjcGwiOiAidHJ1ZSIsDQogICAgICAgICAgICAgICAgICAgICJmYW1pbHlfZGV2aWNlX2lkIjogc3RyKHV1aWQudXVpZDQoKSksDQogICAgICAgICAgICAgICAgICAgICJjcmVkZW50aWFsc190eXBlIjogImRldmljZV9iYXNlZF9sb2dpbl9wYXNzd29yZCIsDQogICAgICAgICAgICAgICAgICAgICJlcnJvcl9kZXRhaWxfdHlwZSI6ICJidXR0b25fd2l0aF9kaXNhYmxlZCIsDQogICAgICAgICAgICAgICAgICAgICJzb3VyY2UiOiAiZGV2aWNlX2Jhc2VkX2xvZ2luIiwNCiAgICAgICAgICAgICAgICAgICAgImVtYWlsIjogc2lkLA0KICAgICAgICAgICAgICAgICAgICAicGFzc3dvcmQiOiBwcywNCiAgICAgICAgICAgICAgICAgICAgImFjY2Vzc190b2tlbiI6ICIzNTA2ODU1MzE3MjglN0M2MmY4Y2U5Zjc0YjEyZjg0YzEyM2NjMjM0MzdhNGEzMiIsDQogICAgICAgICAgICAgICAgICAgICJnZW5lcmF0ZV9zZXNzaW9uX2Nvb2tpZXMiOiAiMSIsDQogICAgICAgICAgICAgICAgICAgICJtZXRhX2luZl9mYm1ldGEiOiAiIiwNCiAgICAgICAgICAgICAgICAgICAgImFkdmVydGlzZXJfaWQiOiBzdHIodXVpZC51dWlkNCgpKSwNCiAgICAgICAgICAgICAgICAgICAgImN1cnJlbnRseV9sb2dnZWRfaW5fdXNlcmlkIjogIjAiLA0KICAgICAgICAgICAgICAgICAgICAibG9jYWxlIjogImVuX0dCIiwNCiAgICAgICAgICAgICAgICAgICAgImNsaWVudF9jb3VudHJ5X2NvZGUiOiAiR0IiLA0KICAgICAgICAgICAgICAgICAgICAibWV0aG9kIjogImF1dGgubG9naW4iLA0KICAgICAgICAgICAgICAgICAgICAiZmJfYXBpX3JlcV9mcmllbmRseV9uYW1lIjogImF1dGhlbnRpY2F0ZSIsDQogICAgICAgICAgICAgICAgICAgICJmYl9hcGlfY2FsbGVyX2NsYXNzIjogImNvbS5mYWNlYm9vay5hY2NvdW50LmxvZ2luLnByb3RvY29sLkZiNGFBdXRoSGFuZGxlciIsDQogICAgICAgICAgICAgICAgICAgICJhcGlfa2V5IjogIjg4MmE4NDkwMzYxZGE5ODcwMmJmOTdhMDIxZGRjMTRkIn0NCiAgICAgICAgICAgICAgICBoZWFkZXJzID0geydVc2VyLUFnZW50JzogdXNlcl9hZ2VudCwNCidDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJywNCidIb3N0JzogJ2dyYXBoLmZhY2Vib29rLmNvbScsDQonWC1GQi1OZXQtSE5JJzogc3RyKHJhbmRvbS5yYW5kaW50KDIwMDAwLCA0MDAwMCkpLA0KJ1gtRkItU0lNLUhOSSc6IHN0cihyYW5kb20ucmFuZGludCgyMDAwMCwgNDAwMDApKSwNCidYLUZCLUNvbm5lY3Rpb24tVHlwZSc6ICdNT0JJTEUuTFRFJywNCidYLVRpZ29uLUlzLVJldHJ5JzogJ0ZhbHNlJywNCidYLWZiLXNlc3Npb24taWQnOiAnbmlkPWppWit5Tk5CZ2J3QztwaWQ9TWFpbjt0aWQ9MTMyO25jPTE7ZmM9MDtiYz0wO2NpZD1kMjlkNjdkMzdlY2EzODc0ODJhOGE1Yjc0MGY4NGY2MicsDQonWC1mYi1kZXZpY2UtZ3JvdXAnOiAnNTEyMCcsDQonWC1GQi1GcmllbmRseS1OYW1lJzogJ1ZpZXdlclJlYWN0aW9uc011dGF0aW9uJywNCidYLUZCLVJlcXVlc3QtQW5hbHl0aWNzLVRhZ3MnOiAnZ3JhcGhzZXJ2aWNlJywNCidYLUZCLUhUVFAtRW5naW5lJzogJ0xpZ2VyJywNCidYLUZCLUNsaWVudC1JUCc6ICdUcnVlJywNCidYLUZCLVNlcnZlci1DbHVzdGVyJzogJ1RydWUnLA0KJ1gtZmItY29ubmVjdGlvbi10b2tlbic6ICdkMjlkNjdkMzdlY2EzODc0ODJhOGE1Yjc0MGY4NGY2MicsfQ0KICAgICAgICAgICAgICAgIHEgPSBzZXNzaW9uLnBvc3QoImh0dHBzOi8vYi1ncmFwaC5mYWNlYm9vay5jb20vYXV0aC9sb2dpbiIsZGF0YT1kYXRhLCBoZWFkZXJzPWhlYWRlcnMsIGFsbG93X3JlZGlyZWN0cz1GYWxzZSkuanNvbigpDQogICAgICAgICAgICAgICAgaWYgJ3Nlc3Npb25fa2V5JyBpbiBxOg0KICAgICAgICAgICAgICAgICAgICBja2trID0gIjsiLmpvaW4oaVsibmFtZSJdKyI9IitpWyJ2YWx1ZSJdIGZvciBpIGluIHFbInNlc3Npb25fY29va2llcyJdKTtNQUhBREliID0gYmFzZTY0LmI2NGVuY29kZShvcy51cmFuZG9tKDE4KSkuZGVjb2RlKCkucmVwbGFjZSgiPSIsIiIpLnJlcGxhY2UoIisiLCJfIikucmVwbGFjZSgiLyIsIi0iKTtjb29raWUgPSBmInNiPXtNQUhBRElifTt7Y2tra30iDQogICAgICAgICAgICAgICAgICAgIHByaW50KGYiXHJccntHMX1bQkQ3MS1PS10ge3NpZH0gfCB7cHN9ICIpDQogICAgICAgICAgICAgICAgICAgIG9wZW4oJy9zZGNhcmQvQkQ3MS1NMi1GSUxFLU9LLnR4dCcsJ2EnKS53cml0ZShzaWQrJ3wnK3BzKyd8Jytjb29raWUrJ1xuJykNCiAgICAgICAgICAgICAgICAgICAgb2tzLmFwcGVuZChzaWQpDQogICAgICAgICAgICAgICAgICAgIGJyZWFrDQogICAgICAgICAgICAgICAgZWxpZiAnd3d3LmZhY2Vib29rLmNvbScgaW4gcVsnZXJyb3InXVsnbWVzc2FnZSddOg0KICAgICAgICAgICAgICAgICAgICBwcmludChmIlxyXHJ7TX1CRDcxLUNQXSB7c2lkfSB8IHtwc30gIikNCiAgICAgICAgICAgICAgICAgICAgb3BlbignL3NkY2FyZC9CRDcxLU0yLUZJTEUtT0sudHh0JywnYScpLndyaXRlKHNpZCsnfCcrcHMrJ1xuJykNCiAgICAgICAgICAgICAgICAgICAgY3BzLmFwcGVuZChzaWQpDQogICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgY29udGludWUNCiAgICAgICAgICAgIGxvb3ArPTENCiAgICAgICAgZXhjZXB0IHJlcXVlc3RzLmV4Y2VwdGlvbnMuQ29ubmVjdGlvbkVycm9yOg0KICAgICAgICAgICAgc2VsZi5tZXRob2RDKHNpZCwgbmFtZSwgcHMpDQojX19fX19fX19fX19fX19fX19fWyBQQVNTV09SRCBdX19fX19fX19fX19fX19fX19fIw0KICAgIGRlZiBwYXN3KHNlbGYpOiAgICAgICANCiAgICAgICAgICAgIHB3ID0gW10NCiAgICAgICAgICAgIGNsZWFyKCkNCiAgICAgICAgICAgIHByaW50KGYne0cxfVt7QX09e0cyfV17RzJ9IEVYQU1QTEUge0F9OntHMn0gQkQgMTAtMTgvSU5ESUEgMy01Jyk7bGluZXgoKQ0KICAgICAgICAgICAgc2wgPSBpbnQoaW5wdXQoZid7RzF9W3tBfT97RzN9XXtHM30gUEFTU1dPUkQgTElNSVQge0F9OntHM30gJykpDQogICAgICAgICAgICBjbGVhcigpDQogICAgICAgICAgICBwcmludChmJ3tHMX1be0F9P3tHNH1de0c0fSBFWEFNUExFIHtBfTp7RzR9IGZpcnN0MTIzL2ZpcnN0bGFzdC9maXJzdEBAQCcpDQogICAgICAgICAgICBsaW5leCgpDQogICAgICAgICAgICBpZiBzbCA9PScnOg0KICAgICAgICAgICAgICAgIHByaW50KGYne0cxfVt7QX09e0c1fV17RzV9IFBVVCBMSU1JVCBCRVRXRUVOIDEgVE8gMzAnKQ0KICAgICAgICAgICAgZWxpZiBzbCA+IDIwOg0KICAgICAgICAgICAgICAgIHByaW50KGYne0cxfVt7QX09e0cxfV17RzF9IFBBU1NXT1JEIExJTUlUIFNIT1VMRCBOT1QgQkUgR1JFQVRFUiBUSEFOIDMwJykNCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgZm9yIHNyIGluIHJhbmdlKHNsKToNCiAgICAgICAgICAgICAgICAgICAgcHcuYXBwZW5kKGlucHV0KGYne0cxfVt7QX09e0cxfV17RzF9IFBBU1NXT1JEIE5PIHtHMX1be0F9e3NyKzF9e0cxfV0ge0F9OntHMX0gJykpDQogICAgICAgICAgICBjbGVhcigpDQogICAgICAgICAgICBwcmludChmJ3tHMX1be0F9PXtHMX1de0cxfSBUT1RBTCBGSUxFIFVJRCB7QX06e0cxfSAlcyAnICUgbGVuKHNlbGYuaWQpKQ0KICAgICAgICAgICAgcHJpbnQoZid7RzF9W3tBfT17RzJ9XXtHMn0gUEFTU1dPUkQgTElNSVQge0F9OntHMX0ge3NsfSAnKQ0KICAgICAgICAgICAgcHJpbnQoZid7RzF9W3tBfT17RzN9XXtHM30gVFVSTiB7RzN9W3tBfU9Oe0F9L3tBfU9GRntHM31de0czfSBBSVJQTEFORSBNT0RFIEVWRVJZIHtBfTN7RzN9IE1JTicpDQogICAgICAgICAgICBsaW5leCgpDQogICAgICAgICAgICB3aXRoIExpa2hvbihtYXhfd29ya2Vycz0zMCkgYXMgTUFIQURJd29ybGQ6DQogICAgICAgICAgICAgICAgZm9yIHpzYiBpbiBzZWxmLmlkOg0KICAgICAgICAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICAgICAgICAgdWlkLCBuYW1lID0genNiLnNwbGl0KCd8JykNCiAgICAgICAgICAgICAgICAgICAgICAgc3ogPSBuYW1lLnNwbGl0KCcgJykNCiAgICAgICAgICAgICAgICAgICAgICAgaWYgbGVuKHN6KSA9PSAzIG9yIGxlbihzeikgPT0gNCBvciBsZW4oc3opID09IDUgb3IgbGVuKHN6KSA9PSA4Og0KICAgICAgICAgICAgICAgICAgICAgICAgICAgcHd4ID0gIHB3DQogICAgICAgICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHd4ID0gIHB3DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgJ21ldGhvZEEnIGluIG1ldGhvZHM6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1BSEFESXdvcmxkLnN1Ym1pdChzZWxmLm1ldGhvZEEsIHVpZCwgbmFtZSwgcHd4KQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsaWYgJ21ldGhvZEInIGluIG1ldGhvZHM6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1BSEFESXdvcmxkLnN1Ym1pdChzZWxmLm1ldGhvZEIsIHVpZCwgbmFtZSwgcHd4KQ0KICAgICAgICAgICAgICAgICAgIGV4Y2VwdDpwYXNzDQogICAgICAgICAgICByZXN1bHQob2tzLGNwcykNCiNfX19fX19fX19fX19fX19fX19bIFJBTkRPTSBNRVRIT0QgXV9fX19fX19fX19fX19fX19fXyMNCmRlZiByYW5kbShpZHMscHNkKToNCiAgICBnbG9iYWwgbG9vcCxvayxjcA0KICAgIHN5cy5zdGRvdXQud3JpdGUoZiJccntHMX1be0F9QkQ3MS1YRHtHMX1de0F9LXtHMX1be0F9e2xvb3B9e0cxfV17QX0te0cxfVt7QX1PS3tHMX0ve0F9Q1B7RzF9XXtBfS17RzF9W3tBfXtsZW4ob2spfXtHMX0ve0F9e2xlbihjcCl9e0cxfV0gIikNCiAgICBzeXMuc3Rkb3V0LmZsdXNoKCkNCiAgICB0cnk6DQogICAgICAgIGZvciBwYXMgaW4gcHNkOg0KICAgICAgICAgICAgZGF0YT17J2FkaWQnOnN0cih1dWlkLnV1aWQ0KCkpLA0KICAgICAgICAgICAgJ2Zvcm1hdCc6J2pzb24nLA0KICAgICAgICAgICAgJ2RldmljZV9pZCc6c3RyKHV1aWQudXVpZDQoKSksDQogICAgICAgICAgICAnZW1haWwnOmlkcywNCiAgICAgICAgICAgICdwYXNzd29yZCc6cGFzLA0KICAgICAgICAgICAgJ2dlbmVyYXRlX2FuYWx5dGljc19jbGFpbXMnOicxJywNCiAgICAgICAgICAgICdjb21tdW5pdHlfaWQnOicnLA0KICAgICAgICAgICAgJ2NwbCc6J3RydWUnLCd0cnlfbnVtJzonMScsDQogICAgICAgICAgICAnZmFtaWx5X2RldmljZV9pZCc6c3RyKHV1aWQudXVpZDQoKSksDQogICAgICAgICAgICAnY3JlZGVudGlhbHNfdHlwZSc6J3Bhc3N3b3JkJywNCiAgICAgICAgICAgICdzb3VyY2UnOidsb2dpbicsDQogICAgICAgICAgICAnZXJyb3JfZGV0YWlsX3R5cGUnOididXR0b25fd2l0aF9kaXNhYmxlZCcsDQogICAgICAgICAgICAnZW5yb2xsX21pc2F1dGgnOidmYWxzZScsDQogICAgICAgICAgICAnZ2VuZXJhdGVfc2Vzc2lvbl9jb29raWVzJzonMScsDQogICAgICAgICAgICAnZ2VuZXJhdGVfbWFjaGluZV9pZCc6JzEnLA0KICAgICAgICAgICAgJ2N1cnJlbnRseV9sb2dnZWRfaW5fdXNlcmlkJzonMCcsDQogICAgICAgICAgICAnbG9jYWxlJzonZW5fVVMnLA0KICAgICAgICAgICAgJ2NsaWVudF9jb3VudHJ5X2NvZGUnOidVUycsDQogICAgICAgICAgICAnZmJfYXBpX3JlcV9mcmllbmRseV9uYW1lJzonYXV0aGVudGljYXRlJywNCiAgICAgICAgICAgICdhcGlfa2V5JzonNjJmOGNlOWY3NGIxMmY4NGMxMjNjYzIzNDM3YTRhMzInLA0KICAgICAgICAgICAgJ2FjY2Vzc190b2tlbic6JzM1MDY4NTUzMTcyOHw2MmY4Y2U5Zjc0YjEyZjg0YzEyM2NjMjM0MzdhNGEzMid9DQogICAgICAgICAgICBoZWFkPXsnVXNlci1BZ2VudCc6ICdbRkJBTi9GQjRBO0ZCQVYvMzA1LjEuMC40MC4xMjA7RkJCVi8yNzI0MDEyMDk7RkJETS97ZGVuc2l0eT0yLjAsd2lkdGg9NzIwLGhlaWdodD0xNDU2fTtGQkxDL2l0X0lUO0ZCUlYvMjczNDc0MTE4O0ZCQ1IvSSBUSU07RkJNRi9PUFBPO0ZCQkQvT1BQTztGQlBOL2NvbS5mYWNlYm9vay5rYXRhbmE7RkJEVi9DUEgxOTMxO0ZCU1YvMTA7RkJCSy8xO0ZCT1AvMTtGQkNBL2FybTY0LXY4YTo7XScsDQogICAgICAgICAgICAnQWNjZXB0LUVuY29kaW5nJzonZ3ppcCwgZGVmbGF0ZScsDQogICAgICAgICAgICAnQ29ubmVjdGlvbic6J2Nsb3NlJywNCiAgICAgICAgICAgICdDb250ZW50LVR5cGUnOidhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLA0KICAgICAgICAgICAgJ0hvc3QnOidncmFwaC5mYWNlYm9vay5jb20nLA0KICAgICAgICAgICAgJ1gtRkItTmV0LUhOSSc6c3RyKHJhbmRvbS5yYW5kaW50KDJlNCwgNGU0KSksDQogICAgICAgICAgICAnWC1GQi1TSU0tSE5JJzpzdHIocmFuZG9tLnJhbmRpbnQoMmU0LCA0ZTQpKSwNCiAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzonT0F1dGggMzUwNjg1NTMxNzI4fDYyZjhjZTlmNzRiMTJmODRjMTIzY2MyMzQzN2E0YTMyJywNCiAgICAgICAgICAgICdYLUZCLUNvbm5lY3Rpb24tVHlwZSc6J1dJRkknLA0KICAgICAgICAgICAgJ1gtVGlnb24tSXMtUmV0cnknOidGYWxzZScsDQogICAgICAgICAgICAneC1mYi1zZXNzaW9uLWlkJzonbmlkPWppWit5Tk5CZ2J3QztwaWQ9TWFpbjt0aWQ9MTMyO25jPTE7ZmM9MDtiYz0wO2NpZD02MmY4Y2U5Zjc0YjEyZjg0YzEyM2NjMjM0MzdhNGEzMicsDQogICAgICAgICAgICAneC1mYi1kZXZpY2UtZ3JvdXAnOic1MTIwJywNCiAgICAgICAgICAgICdYLUZCLUZyaWVuZGx5LU5hbWUnOidWaWV3ZXJSZWFjdGlvbnNNdXRhdGlvbicsDQogICAgICAgICAgICAnWC1GQi1SZXF1ZXN0LUFuYWx5dGljcy1UYWdzJzonZ3JhcGhzZXJ2aWNlJywNCiAgICAgICAgICAgICdYLUZCLUhUVFAtRW5naW5lJzonTGlnZXInLA0KICAgICAgICAgICAgJ1gtRkItQ2xpZW50LUlQJzonVHJ1ZScsDQogICAgICAgICAgICAnWC1GQi1TZXJ2ZXItQ2x1c3Rlcic6J1RydWUnLA0KICAgICAgICAgICAgJ3gtZmItY29ubmVjdGlvbi10b2tlbic6JzYyZjhjZTlmNzRiMTJmODRjMTIzY2MyMzQzN2E0YTMyJ30NCiAgICAgICAgICAgIHVybCA9ICdodHRwczovL2ItZ3JhcGguZmFjZWJvb2suY29tL2F1dGgvbG9naW4nDQogICAgICAgICAgICBwbyA9IHJlcXVlc3RzLnBvc3QodXJsLGRhdGE9ZGF0YSxoZWFkZXJzPWhlYWQsYWxsb3dfcmVkaXJlY3RzPUZhbHNlKS50ZXh0DQogICAgICAgICAgICBxID0ganNvbi5sb2FkcyhwbykNCiAgICAgICAgICAgIGlmICdhY2Nlc3NfdG9rZW4nIGluIHE6DQogICAgICAgICAgICAgICAgdWlkID0gc3RyKHFbJ3VpZCddKQ0KICAgICAgICAgICAgICAgIGNva2kgPSAiOyIuam9pbihpWyJuYW1lIl0rIj0iK2lbInZhbHVlIl0gZm9yIGkgaW4gcVsic2Vzc2lvbl9jb29raWVzIl0pDQogICAgICAgICAgICAgICAgcHJpbnQoZidcclxye0cxfVtCRDcxLU9LXSB7dWlkfSB8IHtwYXN9JykNCiAgICAgICAgICAgICAgICBwcmludChmJ1xyXHJ7RzF9W0NPT0tJRV17QX0ge2Nva2l9JykNCiAgICAgICAgICAgICAgICBvcGVuKCcvc2RjYXJkL0JENzEtUk5ETS1PSy50eHQnLCdhJykud3JpdGUodWlkKyd8JytwYXMrJ3wnK2Nva2krJ1xuJykNCiAgICAgICAgICAgICAgICBvay5hcHBlbmQodWlkKQ0KICAgICAgICAgICAgICAgIGJyZWFrDQogICAgICAgICAgICBlbHNlOmNvbnRpbnVlDQogICAgICAgIGxvb3ArPTENCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6DQogICAgICAgIHBhc3MNCiMtLS0tLS0tLS0tLS0tLS0tLS1bICBhcHByb3ZhbCAgXS0tLS0tLS0tLS0tLS0tLS0tLS0jDQppbXBvcnQgYmFzZTY0DQpkZWYgYXBwcm92YWwoKToNCiAgb3Muc3lzdGVtKCdjbGVhcicpDQogIHByaW50KGxvZ28pDQogIHV1aWQgPSBzdHIob3MuZ2V0ZXVpZCgpKSArIHN0cihvcy5nZXRsb2dpbigpKQ0KICBpZCA9ICJTIi5qb2luKHV1aWQpDQogIHN4YiA9ICdCRDcxJw0KICB0cnk6DQogICAgaHR0cENhaHQgPSByZXF1ZXN0cy5nZXQoYmFzZTY0LmI2NGRlY29kZSgiYUhSMGNITTZMeTl0WVdacFlXMXpORFl1WW14dlozTndiM1F1WTI5dEx6SXdNalF2TURrdllYQndjbTkyWVd4Zk1qZ3VhSFJ0YkE9PSIpKS50ZXh0DQogICAgaWYgaWQgaW4gaHR0cENhaHQ6DQogICAgICBwcmludCgiXDAzM1sxOzMybVtcMDMzWzE7MzFt4oCTXDAzM1sxOzMybV0gWW91ciBLZXkgaXMgU3VjY2Vzc2Z1bGx5IEFwcHJvdmVkIikNCiAgICAgIHRpbWUuc2xlZXAoMC41KQ0KICAgICAgbXNnID0gc3RyKG9zLmdldGV1aWQoKSkNCiAgICAgIG1lbnUoKQ0KICAgICAgcGFzcw0KICAgIGVsc2U6DQogICAgICBuYWFtZSA9IGlucHV0KCJcMDMzWzE7MzJtW1wwMzNbMTszMW3igJNcMDMzWzE7MzJtXSBFTlRFUiBZT1VSIE5BTUUgOiAiKQ0KICAgICAgcHJpbnQoJ1wwMzNbMTszNG3ilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZAnKQ0KICAgICAgcHJpbnQoIlwwMzNbMTszMm1bXDAzM1sxOzMxbeKAk1wwMzNbMTszMm1dIE5vdGUgOiBUb29sIGlzIFBhaWQgJiBXZSBBY2NlcHQgQWxsIFR5cGVzIE9mIFBBeW1lbnQgIE1ldGhvZCAuIElmIFRoZXJlIHdhcyBGYiBVcGRhdGUgJiBUb29sIFdhc250IFJ1biBUaGVuIFdlIEFyZSBOb3QgUmVzcG9uc2libGUgRm9yIEFsbCBPZiBUaGlzIC4gV2UgV2lsbCBUcnkgIFRvIFVwZGF0ZSBTY3JpcHQgRXZlcnkgVGltZSBCdXQgSXQgVG9vayBEYXkgIikNCiAgICAgIHByaW50KCdcMDMzWzE7MzRt4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQJykNCiAgICAgIHByaW50KCdcMDMzWzE7MzJtW1wwMzNbMTszMW0xXDAzM1sxOzMybV0gOCQgXDAzM1sxOzkybUFwcHJvdmFsIEZvciAxIG1vbnRoJykNCiAgICAgIHByaW50KCdcMDMzWzE7MzJtW1wwMzNbMTszMW0yXDAzM1sxOzMybV0gNiQgXDAzM1sxOzkybUFwcHJvdmFsIEZvciAxNSBkYXlzJykNCiAgICAgIHByaW50KCdcMDMzWzE7MzJtW1wwMzNbMTszMW0zXDAzM1sxOzMybV0gMyQgXDAzM1sxOzkybUFwcHJvdmFsIEZvciA3IGRheXMgJykNCiAgICAgIHByaW50KCdcMDMzWzE7MzRt4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQJykNCiAgICAgIGlucHV0KCdcMDMzWzE7MzJtW1wwMzNbMTszMW3igJNcMDMzWzE7MzJtXSBQcmVzcyBFbnRlciBGb3IgQ29udGFjdCBUbyBBZG1pbiAnKQ0KICAgICAgcmVxdWVzdHMuZ2V0KCJodHRwczovL2FwaS50ZWxlZ3JhbS5vcmcvYm90NjMyMTA4MTM5NTpBQUZYT1hlcVRaYmQwM1ZBRVJKTFNXdGN5YVhmVHJCeW9jSS9zZW5kTWVzc2FnZT9jaGF0X2lkPTYxNTY1MzEzNDQmdGV4dD0gW+KAol0gIituYWFtZSsiIFJFUVVFU1RFRCBGT1IgQVBST1ZBTCAiK2lkK3N4YikNCiAgICAgIG9zLnN5c3RlbSgnYW0gc3RhcnQgaHR0cHM6Ly93YS5tZS8rODgwMTkyNzQ1NzAwJykNCiAgICAgIHByaW50KCJcMDMzWzE7MzJtW1wwMzNbMTszMW3igJNcMDMzWzE7MzJtXSBZT1VSIFJFUVVFU1QgSEFTIEJFRU4gU0VOVCIpDQogICAgICB0aW1lLnNsZWVwKDEpDQogICAgICBhcHByb3ZhbCgpDQogIGV4Y2VwdDoNCiAgICBzeXMuZXhpdCgpIA0KIy0tLS0tLS0tLS0tLS0tLS0tLVsgIEVORCAgXS0tLS0tLS0tLS0tLS0tLS0tLS0jDQp0cnk6DQoJYXBwcm92YWwoKQ0KZXhjZXB0IHJlcXVlc3RzLmV4Y2VwdGlvbnMuQ29ubmVjdGlvbkVycm9yOg0KCXByaW50KCdcbiBObyBpbnRlcm5ldCBjb25uZWN0aW9uIC4uLicpDQoJZXhpdCgp'))