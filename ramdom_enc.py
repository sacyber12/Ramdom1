#__________________| INFO |___________________#
#______SCRIPT ENCRYPTED BY PYTHON 3.0
#______CODING BY: MEHEDI
#______TELEGRAM : https://t.me/lokmanvau
#________________| SCRIPT DATA |_____________#

import base64
exec(base64.b64decode(b'DQoNCg0KaW1wb3J0IG9zLHpsaWINCmZyb20gb3MgaW1wb3J0IHN5c3RlbSBhcyBvc1JVQg0KZnJvbSBvcyBpbXBvcnQgc3lzdGVtIGFzIGNtZA0Kb3Muc3lzdGVtKCdjbGVhcicpDQpwcmludChmJ1x4MWJbMzg7NTs0Nm1bXHgxYlsxOzk3bT1ceDFiWzM4OzU7NDZtXSBMT0FESU5HIE1PRFVMRVMgJykNCnRyeToNCiAgICBpbXBvcnQgcmVxdWVzdHMgDQpleGNlcHQgSW1wb3J0RXJyb3I6DQogICAgcHJpbnQoZidceDFiWzM4OzU7NDZtW1x4MWJbMTs5N209XHgxYlszODs1OzQ2bV0gSU5TVEFMTElORyBSRVFVRVNUUyAnKQ0KICAgIG9zLnN5c3RlbSgncGlwIGluc3RhbGwgcmVxdWVzdHMnKQ0KdHJ5Og0KICAgIGltcG9ydCBjb25jdXJyZW50LmZ1dHVyZXMNCmV4Y2VwdCBJbXBvcnRFcnJvcjoNCiAgICBwcmludChmJ1x4MWJbMzg7NTs0Nm1bXHgxYlsxOzk3bT1ceDFiWzM4OzU7NDZtXSBJTlNUQUxMSU5HIEZVVFVSRVMgJykNCiAgICBvcy5zeXN0ZW0oJ3BpcCBpbnN0YWxsIGZ1dHVyZXMnKQ0KdHJ5Og0KICAgIGltcG9ydCBtZWNoYW5pemUNCmV4Y2VwdCBNb2R1bGVOb3RGb3VuZEVycm9yOg0KICAgIG9zLnN5c3RlbSgncGlwIGluc3RhbGwgbWVjaGFuaXplID4gL2Rldi9udWxsJykNCmZyb20gdXJsbGliLnJlcXVlc3QgaW1wb3J0IFJlcXVlc3QsIHVybG9wZW4NCmltcG9ydCBvcywgcmVxdWVzdHMsIHJlLHBsYXRmb3JtLCBzeXMsIHJhbmRvbSwgc3VicHJvY2VzcywgdGhyZWFkaW5nLCBpdGVydG9vbHMsYmFzZTY0LHV1aWQsemxpYixyZSxqc29uLHV1aWQsc3VicHJvY2VzcyxzaHV0aWwsd2ViYnJvd3Nlcix0aW1lLGpzb24sc3lzLHJhbmRvbSxkYXRldGltZSx0aW1lLHJlLHN1YnByb2Nlc3MscGxhdGZvcm0sc3RyaW5nLGpzb24sdGltZSxyZSxyYW5kb20sc3lzLHN0cmluZyx1dWlkDQpmcm9tIGNvbmN1cnJlbnQuZnV0dXJlcyBpbXBvcnQgVGhyZWFkUG9vbEV4ZWN1dG9yIGFzIExpa2hvbg0KZnJvbSBzdHJpbmcgaW1wb3J0ICogDQpmcm9tIHJhbmRvbSBpbXBvcnQgcmFuZGludA0KZnJvbSB0aW1lIGltcG9ydCBzbGVlcCBhcyBzbHANCmZyb20gb3MgaW1wb3J0IHN5c3RlbSBhcyBjbWQNCmZyb20gemxpYiBpbXBvcnQgZGVjb21wcmVzcyANCmltcG9ydCBvcywgcGxhdGZvcm0NCmZyb20gY29uY3VycmVudC5mdXR1cmVzIGltcG9ydCBUaHJlYWRQb29sRXhlY3V0b3INCmZhc3Rfd29yayA9IFRocmVhZFBvb2xFeGVjdXRvcihtYXhfd29ya2Vycz0xNSkuc3VibWl0DQojX19fX19fX19fX19fX19fX19fWyBMT09QIF1fX19fX19fX19fX19fX19fX18jDQp0b3RhbGRtcCA9IDANCmNvdW50ID0gMA0KbG9vcCA9IDANCm9rcyA9IFtdDQpjcHMgPSBbXQ0KaWQgPSBbXQ0KcHMgPSBbXQ0Kc2lkID0gW10NCnRvdGFsPVtdDQptZXRob2RzID0gW10NCnNyYW5nZSA9IDANCnNhdmVkID0gW10NCnRvdGFsZG1wID0gMA0KZmlsdGVyID0gW10NCmxvb3Asb2ssY3AsdXNlciA9IDAsW10sW10sW10NCmNvayxwbGlzdCA9IFtdLFtdDQojX19fX19fX19fX19fX19fX19fWyBTWVMgXV9fX19fX19fX19fX19fX19fXyMNCnN5cy5zdGRvdXQud3JpdGUoJ1x4MWJdMjsgQkQ3MVx4MDcnKQ0KaGVhZCA9IHsnSG9zdCc6ICdhZHNtYW5hZ2VyLmZhY2Vib29rLmNvbScsICdzZWMtY2gtdWEnOiAnIkNocm9taXVtIjt2PSIxMDciLCAiTm90PUE/QnJhbmQiO3Y9IjI0IicsICd2aWV3cG9ydC13aWR0aCc6ICc5ODAnfQ0KI19fX19fX19fX19fX19fX19fX1sgQ09MT1VSIF1fX19fX19fX19fX19fX19fX18jDQpBID0gJ1x4MWJbMTs5N20nO1IgPSAnXHgxYlszODs1OzE5Nm0nO1kgPSAnXDAzM1sxOzMzbSc7RyA9ICdceDFiWzM4OzU7NDhtJztCID0gJ1x4MWJbMzg7NTs4bSc7RzEgPSAnXHgxYlszODs1OzQ2bSc7RzIgPSAnXHgxYlszODs1OzQ3bSc7RzMgPSAnXHgxYlszODs1OzQ4bSc7RzQgPSAnXHgxYlszODs1OzQ5bSc7RzUgPSAnXHgxYlszODs1OzUwbSc7WCA9ICdcMzNbMTszNG0nO1gxID0gJ1x4MWJbMzg7NTsxNG0nO1gyID0gJ1x4MWJbMzg7NTsxMjNtJztYMyA9ICdceDFiWzM4OzU7MTIybSc7WDQgPSAnXHgxYlszODs1Ozg2bSc7WDUgPSAnXHgxYlszODs1OzEyMW0nO1MgPSAnXHgxYlsxOzk2bSc7TSA9ICdceDFiWzM4OzU7MjA1bScNCiNfX19fX19fX19fX19fX19fX19bIExJTkVYIF1fX19fX19fX19fX19fX19fX18jDQpkZWYgY2xlYXIoKTpvcy5zeXN0ZW0oJ2NsZWFyJyk7cHJpbnQobG9nbykNCmRlZiBsaW5leCgpOnByaW50KGYne0F94pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAJykNCiNfX19fX19fX19fX19fX19fX19bIExPR08gXV9fX19fX19fX19fX19fX19fXyMNCmxvZ28gPWYiIiINClx4MWJbMzg7NTs4Mm3ilZTilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilZcNClx4MWJbMzg7NTs4Mm3ilINceDFiWzM4OzU7ODJtIF9fICBfXyAgX19fICAg4pSDXHgxYlszODs1Ozg0bUZCIFx4MWJbMzg7NTs4NG06IFwwMzNbMzM7MW1NRUhFREnihIVTSUZBVEggXHgxYlszODs1OzgybeKUgw0KXHgxYlszODs1OzgybeKUg1x4MWJbMzg7NTs4M218X18pfCAgXCAgIC8gL3zilINceDFiWzM4OzU7ODRtQ0VPXHgxYlszODs1Ozg0bSA6IFx4MWJbMzg7NTs4Mm1NZCBzaWZhdGggICAgXHgxYlszODs1OzgybeKUgw0KXHgxYlszODs1OzgybeKUg1x4MWJbMzg7NTs4NG18X18pfF9fLyAgLyAgIHzilINceDFiWzM4OzU7ODRtR0lUIFx4MWJbMzg7NTs4NG06IFwwMzNbMzU7MW1TQUNZQkVSICAgICAgXHgxYlszODs1OzgybeKUgw0KXHgxYlszODs1OzgybeKUo+KUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUs+KUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUqw0KXHgxYlszODs1OzgybeKUgyBceDFiWzM4OzU7ODJtVE9PTCA6IFx4MWJbMzg7NTs4NG1CRCBSQU5ET00gXHgxYlszODs1OzgybVx4MWJbMzg7NTs4Mm3ilIMgXHgxYlszODs1OzgybVdQIFx4MWJbMzg7NTs4NG06IFx4MWJbMzg7NTs4Mm0rODgwMTkyNzQ1NzAwXHgxYlszODs1OzgybeKUgyAgXHgxYlszODs1Ozg0bVZFUlNJT04gXHgxYlszODs1OzgybTogXDAzM1szMTsxbVhceDFiWzM4OzU7ODJtICAgICAgICAgICAgICDilIMNClx4MWJbMzg7NTs4Mm3ilZrilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilLvilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilZ0iIiINCiNfX19fX19fX19fX19fX19fX19bIFJFU1VMVCBdX19fX19fX19fX19fX19fX19fIw0KZGVmIHJlc3VsdChPS3MsY3BzKToNCiAgICBpZiBsZW4oT0tzKSAhPSAwIG9yIGxlbihjcHMpICE9IDA6DQogICAgICAgIHByaW50KGYnXHJ7QX3ilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAnKQ0KICAgICAgICBwcmludChmJ3tHMX1be0F9PXtHMX1de0cxfSBUSEUgUFJPQ0VTUyBIQVMgQkVFTiBDT01QTEVURS4uLicpDQogICAgICAgIHByaW50KGYne0cxfVt7QX09e0cyfV17RzJ9IFRPVEFMIE9LIHtBfTp7RzJ9ICVzJyAlIHN0cihsZW4ob2tzKSkpDQogICAgICAgIHByaW50KGYne0cxfVt7QX09e0cyfV17RzN9IFRPVEFMIENQIHtBfTp7RzN9ICVzJyAlIHN0cihsZW4oY3BzKSkpDQogICAgICAgIHByaW50KGYnXHJ7QX3ilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAnKQ0KICAgICAgICBpbnB1dChmIntHMX1be0F9PXtHNH1de0c0fSBQUkVTUyBFTlRFUiBUTyBCQUNLIE1FTlUgIikNCiAgICAgICAgZXhpdCgpDQojX19fX19fX19fX19fX19fX19fWyBNRU5VIF1fX19fX19fX19fX19fX19fX18jDQpkZWYgbWVudSgpOiAgIA0KICAgIGNsZWFyKCkNCiAgICBwcmludChmJ3tHMX1be0F9MXtHMX1de0cxfSBGSUxFIENMT05JTkcnKQ0KICAgIHByaW50KGYne0cxfVt7QX0ye0cyfV17RzJ9IFJBTkRPTSBDTE9OSU5HJykNCiAgICBwcmludChmJ3tHMX1be0F9M3tHM31de0czfSBDT05UQUNUIFRPT0wgT1dORVInKQ0KICAgIHByaW50KGYne0cxfVt7QX0we0c0fV17RzR9IEVYSVQgVE9PTFMnKQ0KICAgIGxpbmV4KCkNCiAgICBzZWxlY3QgPSBpbnB1dChmJ3tHMX1be0F9P3tHNX1de0c1fSBDSE9JQ0Uge0F9OntHNX0gJykNCiAgICBpZiBzZWxlY3QgPT0nMSc6DQogICAgICAgIF9maWxlXygpDQogICAgZWxpZiBzZWxlY3QgPT0nMic6DQogICAgICAgIF9yYW5kbV8oKQ0KICAgIGVsaWYgc2VsZWN0ID09JzMnOg0KICAgICAgICBvcy5zeXN0ZW0oJ3hkZy1vcGVuIGh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9NRE1laGVkaTE5MScpO21lbnUoKQ0KICAgIGVsaWYgc2VsZWN0ID09JzAnOg0KICAgICAgICBleGl0KGYne0cxfVt7QX09e0cxfV17RzF9IEVYSVQgRE9ORSAnKQ0KICAgIGVsc2U6DQogICAgICAgIHByaW50KGYne0cxfVt7QX09e0cyfV17RzJ9IFZBTElEIE9QVElPTicpDQogICAgICAgIHRpbWUuc2xlZXAoMikNCiAgICAgICAgbWVudSgpDQojX19fX19fX19fX19fX19fX19fWyBSQU5ET00gXV9fX19fX19fX19fX19fX19fXyMgICAgICANCmRlZiBfcmFuZG1fKCk6ICAgDQogICAgY2xlYXIoKQ0KICAgIHByaW50KGYne0cxfVt7QX0xe0cxfV17RzF9IEJBTkdMQURFU0ggQ0xPTklORycpDQogICAgcHJpbnQoZid7RzF9W3tBfTJ7RzJ9XXtHMn0gSU5ESUEgQ0xPTklORycpDQogICAgcHJpbnQoZid7RzF9W3tBfTB7RzN9XXtHM30gQkFDSyBUTyBNQUlOIE1FTlUnKQ0KICAgIGxpbmV4KCkNCiAgICBzZWxlY3QgPSBpbnB1dChmJ3tHMX1be0F9P3tHNX1de0c1fSBDSE9JQ0Uge0F9OntHNX0gJykNCiAgICBpZiBzZWxlY3QgPT0nMSc6DQogICAgICAgIF9iZF8oKQ0KICAgIGVsaWYgc2VsZWN0ID09JzInOg0KICAgICAgICBfSW5kaWFfKCkNCiAgICBlbGlmIHNlbGVjdCA9PScwJzoNCiAgICAJbWVudSgpDQogICAgZWxzZToNCiAgICAgICAgcHJpbnQoZid7RzF9W3tBfT17RzJ9XXtHMn0gVkFMSUQgT1BUSU9OJykNCiAgICAgICAgdGltZS5zbGVlcCgyKQ0KICAgICAgICBfcmFuZG1fKCkNCiNfX19fX19fX19fX19fX19fX19bIEJBTkdMQURFU0ggXV9fX19fX19fX19fX19fX19fXyMNCmRlZiBfYmRfKCk6DQogICAgY2xlYXIoKQ0KICAgIHByaW50KGYne0cxfVt7QX09e0cxfV17RzF9IEVYQU1QTEUge0F9OntHMX0gMDE3e0F9L3tHMX0wMTl7QX0ve0cxfTAxOHtBfS97RzF9MDE2Jyk7bGluZXgoKQ0KICAgIGNvZGUgPSBpbnB1dChmJ3tHMX1be0F9P3tHMn1de0cyfSBDSE9JQ0UgIHtBfTp7RzJ9ICcpDQogICAgbmFtZSA9ICcnLmpvaW4ocmFuZG9tLmNob2ljZShzdHJpbmcuZGlnaXRzKSBmb3IgXyBpbiByYW5nZSgyKSkNCiAgICBjb2QgPSAnJy5qb2luKHJhbmRvbS5jaG9pY2Uoc3RyaW5nLmRpZ2l0cykgZm9yIF8gaW4gcmFuZ2UoMikpDQogICAgY2xlYXIoKQ0KICAgIHByaW50KGYne0cxfVt7QX09e0czfV17RzN9IEVYQU1QTEUge0F9OntHM30gMzAwMHtBfS97RzN9NTAwMHtBfS97RzN9MTAwMDB7QX0ve0czfTk5OTk5Jyk7bGluZXgoKQ0KICAgIGxpbWl0ID0gaW50KGlucHV0KGYne0cxfVt7QX0/e0c0fV17RzR9IENIT0lDRSAge0F9OntHNH0gJykpDQogICAgZm9yIHggaW4gcmFuZ2UobGltaXQpOg0KICAgICAgICBubXAgPSAnJy5qb2luKHJhbmRvbS5jaG9pY2Uoc3RyaW5nLmRpZ2l0cykgZm9yIF8gaW4gcmFuZ2UoNCkpDQogICAgICAgIHVzZXIuYXBwZW5kKG5tcCkNCiAgICBjbGVhcigpDQogICAgd2l0aCBMaWtob24obWF4X3dvcmtlcnM9MzApYXMgc2V4eToNCiAgICAgICAgY2xlYXIoKQ0KICAgICAgICBwcmludChmJ3tHMX1be0F9PXtHMX1de0cxfSBTSU0gQ09ERSAge0F9OntHMX0ge2NvZGV9JykNCiAgICAgICAgcHJpbnQoZid7RzF9W3tBfT17RzJ9XXtHMn0gVE9UQUwgVUlEIHtBfTp7RzJ9IHtzdHIobGVuKHVzZXIpKX0nKQ0KICAgICAgICBwcmludChmJ3tHMX1be0F9PXtHM31de0czfSBUVVJOIHtHM31be0F9T057QX0ve0F9T0ZGe0czfV17RzN9IEFJUlBMQU5FIE1PREUgRVZFUlkge0F9M3tHM30gTUlOJyk7bGluZXgoKQ0KICAgICAgICBmb3IgbG92ZSBpbiB1c2VyOg0KICAgICAgICAgICAgaWRzID0gY29kZStuYW1lK2NvZCtsb3ZlDQogICAgICAgICAgICBwc2QgPSBbY29kZStuYW1lK2NvZCtsb3ZlLGNvZCtsb3ZlLG5hbWUrbG92ZSxjb2RlK25hbWUrY29kLCdiYW5nbGFkZXNoJywnQmFuZ2xhZGVzaCddDQogICAgICAgICAgICBzZXh5LnN1Ym1pdChyYW5kbSxpZHMscHNkKQ0KICAgIHByaW50KCcnKQ0KICAgIHByaW50KGYnXHJ7QX3ilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAnKQ0KICAgIHByaW50KGYne0cxfVt7QX09e0cxfV17RzF9IFRIRSBQUk9DRVNTIEhBUyBCRUVOIENPTVBMRVRFRCcpDQogICAgcHJpbnQoZid7RzF9W3tBfT17RzJ9XXtHMn0gVE9UQUwgT0sgSUQge0F9OntHMn0ge3N0cihsZW4ob2spKX0nKQ0KICAgIHByaW50KGYne0cxfVt7QX09e0czfV17RzN9IFRPVEFMIENQIElEIHtBfTp7RzN9IHtzdHIobGVuKGNwKSl9JykNCiAgICBwcmludChmJ1xye0F94pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAJykNCiAgICBpbnB1dChmJ3tHMX1be0F9PXtHNH1de0c0fSBQUkVTUyBFTlRFUiBUTyBCQUNLICcpDQogICAgbWVudSgpDQojX19fX19fX19fX19fX19fX19fWyBJTkRJQSBdX19fX19fX19fX19fX19fX19fIw0KZGVmIF9JbmRpYV8oKToNCiAgICBjbGVhcigpDQogICAgcHJpbnQoZid7RzF9W3tBfT17RzF9XXtHMX0gRVhBTVBMRSB7QX06e0cxfSArOTE2Mzl7QX0ve0cxfSs5MTkzNHtBfS97RzF9KzkxOTAye0F9L3tHMX0rOTE3MDEnKTtsaW5leCgpDQogICAgY29kZSA9IGlucHV0KGYne0cxfVt7QX0/e0cyfV17RzJ9IENIT0lDRSAge0F9OntHMn0gJykNCiAgICBjbGVhcigpDQogICAgcHJpbnQoZid7RzF9W3tBfT17RzN9XXtHM30gRVhBTVBMRSB7QX06e0czfSAzMDAwe0F9L3tHM301MDAwe0F9L3tHM30xMDAwMHtBfS97RzN9OTk5OTknKTtsaW5leCgpDQogICAgbGltaXQgPSBpbnQoaW5wdXQoZid7RzF9W3tBfT97RzR9XXtHNH0gQ0hPSUNFICB7QX06e0c0fSAnKSkNCiAgICBmb3IgeCBpbiByYW5nZShsaW1pdCk6DQogICAgICAgIG5tcCA9ICIiLiBqb2luKHJhbmRvbS5jaG9pY2Uoc3RyaW5nLmRpZ2l0cykgZm9yIF8gaW4gcmFuZ2UoNykpDQogICAgICAgIHVzZXIuYXBwZW5kKG5tcCkNCiAgICBjbGVhcigpDQogICAgd2l0aCBMaWtob24obWF4X3dvcmtlcnM9MzApIGFzIHNleHk6DQogICAgICAgIGNsZWFyKCkNCiAgICAgICAgcHJpbnQoZid7RzF9W3tBfT17RzF9XXtHMX0gU0lNIENPREUgIHtBfTp7RzF9IHtjb2RlfScpDQogICAgICAgIHByaW50KGYne0cxfVt7QX09e0cyfV17RzJ9IFRPVEFMIFVJRCB7QX06e0cyfSB7c3RyKGxlbih1c2VyKSl9JykNCiAgICAgICAgcHJpbnQoZid7RzF9W3tBfT17RzN9XXtHM30gVFVSTiB7RzN9W3tBfU9Oe0F9L3tBfU9GRntHM31de0czfSBBSVJQTEFORSBNT0RFIEVWRVJZIHtBfTN7RzN9IE1JTicpO2xpbmV4KCkNCiAgICAgICAgZm9yIGxvdmUgaW4gdXNlcjoNCiAgICAgICAgICAgIGlkcyA9IGNvZGUrbG92ZQ0KICAgICAgICAgICAgcHNkID0gW2xvdmUsaWRzWzo4XSwnNTcyNzMyMDAnLCc1OTAzOTIwMCcsJzU3NTc1NzUxJ10NCiAgICAgICAgICAgIHNleHkuc3VibWl0KHJhbmRtLGlkcyxwc2QpDQogICAgcHJpbnQoJycpDQogICAgcHJpbnQoZidccntBfeKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCcpDQogICAgcHJpbnQoZid7RzF9W3tBfT17RzF9XXtHMX0gVEhFIFBST0NFU1MgSEFTIEJFRU4gQ09NUExFVEVEJykNCiAgICBwcmludChmJ3tHMX1be0F9PXtHMn1de0cyfSBUT1RBTCBPSyBJRCB7QX06e0cyfSB7c3RyKGxlbihvaykpfScpDQogICAgcHJpbnQoZid7RzF9W3tBfT17RzN9XXtHM30gVE9UQUwgQ1AgSUQge0F9OntHM30ge3N0cihsZW4oY3ApKX0nKQ0KICAgIHByaW50KGYnXHJ7QX3ilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAnKQ0KICAgIGlucHV0KGYne0cxfVt7QX09e0c0fV17RzR9IFBSRVNTIEVOVEVSIFRPIEJBQ0sgJykNCiAgICBtZW51KCkNCiNfX19fX19fX19fX19fX19fX19bIEZJTEUgXV9fX19fX19fX19fX19fX19fXyMgICAgICANCmRlZiBfZmlsZV8oKToNCiAgICBnbG9iYWwgbWV0aG9kcw0KICAgIGNsZWFyKCkNCiAgICBwcmludChmJ3tHMX1be0F9MXtHMX1de0cxfSBNRVRIT0Qge0cxfVt7QX1NMXtHMX1de0cxfSAnKQ0KICAgIHByaW50KGYne0cxfVt7QX0ye0cyfV17RzJ9IE1FVEhPRCB7RzJ9W3tBfU0ye0cyfV17RzF9ICcpDQogICAgbGluZXgoKQ0KICAgIG9wdGlvbiA9IGlucHV0KGYne0cxfVt7QX0/e0czfV17RzN9IENIT0lDRSB7QX06e0czfSAnKQ0KICAgIGlmIG9wdGlvbiA9PScxJzoNCiAgICAgICAgbWV0aG9kcy5hcHBlbmQoJ21ldGhvZEEnKQ0KICAgICAgICBtYWluX2NyYWNrKCkuY3JhY2soaWQpDQogICAgZWxpZiBvcHRpb24gPT0nMic6DQogICAgICAgIG1ldGhvZHMuYXBwZW5kKCdtZXRob2RCJykNCiAgICAgICAgbWFpbl9jcmFjaygpLmNyYWNrKGlkKQ0KICAgIGVsaWYgb3B0aW9uID09JzAnOg0KICAgICAgICBfZmlsZV8oKQ0KICAgIGVsc2U6DQogICAgICBwcmludChmJ3tHMX1be0F9PXtHMn1de0cyfSBWQUxJRCBPUFRJT04nKQ0KICAgICAgdGltZS5zbGVlcCgyKQ0KICAgICAgX2ZpbGVfKCkNCg0KY2xhc3MgbWFpbl9jcmFjaygpOg0KICAgIGRlZiBfX2luaXRfXyhzZWxmKToNCiAgICAgICAgc2VsZi5pZD1bXQ0KICAgIGRlZiBjcmFjayhzZWxmLGlkKToNCiAgICAgICAgZ2xvYmFsIG1ldGhvZHMNCiAgICAgICAgY2xlYXIoKQ0KICAgICAgICBwcmludChmJ3tHMX1be0F9PXtHMX1de0cxfSBFWEFNUExFIHtBfTp7RzF9IC9zZGNhcmQvQmQ3MS50eHQnKTtsaW5leCgpDQogICAgICAgIHNlbGYuZmlsZSA9IGlucHV0KGYne0cxfVt7QX0/e0cyfV17RzJ9IEZJTEUgTkFNRSB7QX06e0cyfSAnKQ0KICAgICAgICB0cnk6DQogICAgICAgICAgICBzZWxmLmlkID0gb3BlbihzZWxmLmZpbGUpLnJlYWQoKS5zcGxpdGxpbmVzKCkNCiAgICAgICAgICAgIHNlbGYucGFzdygpDQogICAgICAgIGV4Y2VwdCBGaWxlTm90Rm91bmRFcnJvcjoNCiAgICAgICAgICAgIHByaW50KGYne0cxfVt7QX09e0cyfV17RzJ9IE9QUFMgRklMRSBOT1QgRk9VTkQgLi4uJykNCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMikNCiAgICAgICAgICAgIG9zLnN5c3RlbSgnY2xlYXInKQ0KICAgICAgICAgICAgcHJpbnQobG9nbykNCiAgICAgICAgICAgIHByaW50KGYne0cxfVt7QX09e0cyfV17RzJ9IFRSWSBBR0FJTiAuLi4nKQ0KICAgICAgICAgICAgdGltZS5zbGVlcCgyKQ0KICAgICAgICAgICAgbWFpbl9jcmFjaygpLmNyYWNrKGlkKQ0KI19fX19fX19fX19fX19fX19fX1sgRklMRSBNRVRIT0QgTTEgXV9fX19fX19fX19fX19fX19fXyMgICAgICAgICAgIA0KICAgIGRlZiBtZXRob2RBKHNlbGYsIHNpZCwgbmFtZSwgcHN3KToNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgZ2xvYmFsIG9rcyxjcHMsbG9vcA0KICAgICAgICAgICAgdWEgID0gIltGQkFOL0ZCNEE7RkJBVi8iK3N0cihyYW5kb20ucmFuZGludCgxMSw3NykpKycuMC4wLicrc3RyKHJhbmRvbS5yYW5kcmFuZ2UoOSw0OSkpK3N0cihyYW5kb20ucmFuZGludCgxMSw3NykpICsiO0ZCQlYvIitzdHIocmFuZG9tLnJhbmRpbnQoMTExMTExMSw3Nzc3Nzc3KSkrIjsnW0ZCQU4vRkI0QTtGQkFWLzU5LjAuMC4xNS4zMTM7RkJCVi8yMDA5NzE3MjtGQkRNL3tkZW5zaXR5PTEuNSx3aWR0aD01NDAsaGVpZ2h0PTk2MH07RkJMQy9lbl9VUztGQkNSL0FpcnRlbDtGQk1GL1NhbXN1bmc7RkJCRC9TYW1zdW5nO0ZCUE4vY29tLmZhY2Vib29rLmthdGFuYTtGQkRWL0wtRU1FTlQ1MDA7RkJTVi80LjQuMjtudWxsRkJDQS9hcm1lYWJpLXY3YTphcm1lYWJpO10iDQogICAgICAgICAgICBzeXMuc3Rkb3V0LndyaXRlKGYiXHJ7RzF9W3tBfU1BSEFESS1NMXtHMX1de0F9LXtHMX1be0F9e2xvb3B9e0cxfV17QX0te0cxfVt7QX1PS3tHMX0ve0F9Q1B7RzF9XXtBfS17RzF9W3tBfXtsZW4ob2tzKX17RzF9L3tBfXtsZW4oY3BzKX17RzF9XSAiKQ0KICAgICAgICAgICAgc3lzLnN0ZG91dC5mbHVzaCgpDQogICAgICAgICAgICBmcyA9IG5hbWUuc3BsaXQoJyAnKVswXQ0KICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgIGxzID0gbmFtZS5zcGxpdCgnICcpWzFdDQogICAgICAgICAgICBleGNlcHQ6DQogICAgICAgICAgICAgICAgbHMgPSBmcw0KICAgICAgICAgICAgZm9yIHB3IGluIHBzdzoNCiAgICAgICAgICAgICAgICBwcyA9IHB3LnJlcGxhY2UoJ2ZpcnN0Jyxmcy5sb3dlcigpKS5yZXBsYWNlKCdGaXJzdCcsZnMpLnJlcGxhY2UoJ2xhc3QnLGxzLmxvd2VyKCkpLnJlcGxhY2UoJ0xhc3QnLGxzKS5yZXBsYWNlKCdOYW1lJyxuYW1lKS5yZXBsYWNlKCduYW1lJyxuYW1lLmxvd2VyKCkpDQogICAgICAgICAgICAgICAgd2l0aCByZXF1ZXN0cy5TZXNzaW9uKCkgYXMgc2Vzc2lvbjoNCiAgICAgICAgICAgICAgICAgICAgZGF0YSA9IHsiYWRpZCI6IHN0cih1dWlkLnV1aWQ0KCkpLA0KICAgICAgICAgICAgICAgICAgICAiZm9ybWF0IjogImpzb24iLA0KICAgICAgICAgICAgICAgICAgICAiZGV2aWNlX2lkIjogc3RyKHV1aWQudXVpZDQoKSksDQogICAgICAgICAgICAgICAgICAgICJjcGwiOiAidHJ1ZSIsDQogICAgICAgICAgICAgICAgICAgICJmYW1pbHlfZGV2aWNlX2lkIjogc3RyKHV1aWQudXVpZDQoKSksDQogICAgICAgICAgICAgICAgICAgICJjcmVkZW50aWFsc190eXBlIjogImRldmljZV9iYXNlZF9sb2dpbl9wYXNzd29yZCIsDQogICAgICAgICAgICAgICAgICAgICJlcnJvcl9kZXRhaWxfdHlwZSI6ICJidXR0b25fd2l0aF9kaXNhYmxlZCIsDQogICAgICAgICAgICAgICAgICAgICJzb3VyY2UiOiAiZGV2aWNlX2Jhc2VkX2xvZ2luIiwNCiAgICAgICAgICAgICAgICAgICAgImVtYWlsIjogc2lkLA0KICAgICAgICAgICAgICAgICAgICAicGFzc3dvcmQiOiBwcywNCiAgICAgICAgICAgICAgICAgICAgImFjY2Vzc190b2tlbiI6ICIzNTA2ODU1MzE3MjglN0M2MmY4Y2U5Zjc0YjEyZjg0YzEyM2NjMjM0MzdhNGEzMiIsDQogICAgICAgICAgICAgICAgICAgICJnZW5lcmF0ZV9zZXNzaW9uX2Nvb2tpZXMiOiAiMSIsDQogICAgICAgICAgICAgICAgICAgICJtZXRhX2luZl9mYm1ldGEiOiAiIiwNCiAgICAgICAgICAgICAgICAgICAgImFkdmVydGlzZXJfaWQiOiBzdHIodXVpZC51dWlkNCgpKSwNCiAgICAgICAgICAgICAgICAgICAgImN1cnJlbnRseV9sb2dnZWRfaW5fdXNlcmlkIjogIjAiLA0KICAgICAgICAgICAgICAgICAgICAibG9jYWxlIjogImVuX0dCIiwNCiAgICAgICAgICAgICAgICAgICAgImNsaWVudF9jb3VudHJ5X2NvZGUiOiAiR0IiLA0KICAgICAgICAgICAgICAgICAgICAibWV0aG9kIjogImF1dGgubG9naW4iLA0KICAgICAgICAgICAgICAgICAgICAiZmJfYXBpX3JlcV9mcmllbmRseV9uYW1lIjogImF1dGhlbnRpY2F0ZSIsDQogICAgICAgICAgICAgICAgICAgICJmYl9hcGlfY2FsbGVyX2NsYXNzIjogImNvbS5mYWNlYm9vay5hY2NvdW50LmxvZ2luLnByb3RvY29sLkZiNGFBdXRoSGFuZGxlciIsDQogICAgICAgICAgICAgICAgICAgICJhcGlfa2V5IjogIjg4MmE4NDkwMzYxZGE5ODcwMmJmOTdhMDIxZGRjMTRkIn0NCiAgICAgICAgICAgICAgICBoZWFkZXJzID0geydVc2VyLUFnZW50JzonW0RhbHZpay8yLjEuMCAoTGludXg7IFU7IEFuZHJvaWQgOC4wLjA7IG1vdG8gZTUgcGx1cyBCdWlsZC9PUFBTMjcuOTEtMTc5LTgtMTYpW0ZCQU4vRkI0QTtGQkFWLzI4Ny4wLjAuNTAuMTE5O0ZCUE4vY29tLmZhY2Vib29rLmthdGFuYTtGQkxDL2VzX01YO0ZCQlYvMjQzNjYwODY0O0ZCQ1IvbnVsbDtGQk1GL21vdG9yb2xhO0ZCQkQvbW90b3JvbGE7RkJEVi9tb3RvIGU1IHBsdXM7RkJTVi84LjAuMDtGQkNBL2FybWVhYmktdjdhOmFybWVhYmk7RkJETS97ZGVuc2l0eT0xLjcsd2lkdGg9NzIwLGhlaWdodD0xMzU4fTtGQl9GVy8xO0ZCUlYvMDtdJywNCiAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLA0KICAgICAgICAgICAgICAgICAgICAnSG9zdCc6ICdncmFwaC5mYWNlYm9vay5jb20nLA0KICAgICAgICAgICAgICAgICAgICAnWC1GQi1OZXQtSE5JJzogc3RyKHJhbmRvbS5yYW5kaW50KDIwMDAwLCA0MDAwMCkpLA0KICAgICAgICAgICAgICAgICAgICAnWC1GQi1TSU0tSE5JJzogc3RyKHJhbmRvbS5yYW5kaW50KDIwMDAwLCA0MDAwMCkpLA0KICAgICAgICAgICAgICAgICAgICAnWC1GQi1Db25uZWN0aW9uLVR5cGUnOiAnTU9CSUxFLkxURScsDQogICAgICAgICAgICAgICAgICAgICdYLVRpZ29uLUlzLVJldHJ5JzogJ0ZhbHNlJywNCiAgICAgICAgICAgICAgICAgICAgJ3gtZmItc2Vzc2lvbi1pZCc6ICduaWQ9amlaK3lOTkJnYndDO3BpZD1NYWluO3RpZD0xMzI7bmM9MTtmYz0wO2JjPTA7Y2lkPWQyOWQ2N2QzN2VjYTM4NzQ4MmE4YTViNzQwZjg0ZjYyJywNCiAgICAgICAgICAgICAgICAgICAgJ3gtZmItZGV2aWNlLWdyb3VwJzogJzUxMjAnLA0KICAgICAgICAgICAgICAgICAgICAnWC1GQi1GcmllbmRseS1OYW1lJzogJ1ZpZXdlclJlYWN0aW9uc011dGF0aW9uJywNCiAgICAgICAgICAgICAgICAgICAgJ1gtRkItUmVxdWVzdC1BbmFseXRpY3MtVGFncyc6ICdncmFwaHNlcnZpY2UnLA0KICAgICAgICAgICAgICAgICAgICAnWC1GQi1IVFRQLUVuZ2luZSc6ICdMaWdlcicsDQogICAgICAgICAgICAgICAgICAgICdYLUZCLUNsaWVudC1JUCc6ICdUcnVlJywNCiAgICAgICAgICAgICAgICAgICAgJ1gtRkItU2VydmVyLUNsdXN0ZXInOiAnVHJ1ZScsDQogICAgICAgICAgICAgICAgICAgICd4LWZiLWNvbm5lY3Rpb24tdG9rZW4nOiAnZDI5ZDY3ZDM3ZWNhMzg3NDgyYThhNWI3NDBmODRmNjInLH0NCiAgICAgICAgICAgICAgICBxID0gc2Vzc2lvbi5wb3N0KCJodHRwczovL2ItZ3JhcGguZmFjZWJvb2suY29tL2F1dGgvbG9naW4iLGRhdGE9ZGF0YSwgaGVhZGVycz1oZWFkZXJzLCBhbGxvd19yZWRpcmVjdHM9RmFsc2UpLmpzb24oKQ0KICAgICAgICAgICAgICAgIGlmICdzZXNzaW9uX2tleScgaW4gcToNCiAgICAgICAgICAgICAgICAgICAgY2trayA9ICI7Ii5qb2luKGlbIm5hbWUiXSsiPSIraVsidmFsdWUiXSBmb3IgaSBpbiBxWyJzZXNzaW9uX2Nvb2tpZXMiXSk7TUFIQURJYiA9IGJhc2U2NC5iNjRlbmNvZGUob3MudXJhbmRvbSgxOCkpLmRlY29kZSgpLnJlcGxhY2UoIj0iLCIiKS5yZXBsYWNlKCIrIiwiXyIpLnJlcGxhY2UoIi8iLCItIik7Y29va2llID0gZiJzYj17TUFIQURJYn07e2Nra2t9Ig0KICAgICAgICAgICAgICAgICAgICBwcmludChmIlxyXHJ7RzF9W0JENzEtT0tdIHtzaWR9IHwge3BzfSAiKQ0KICAgICAgICAgICAgICAgICAgICBvcGVuKCcvc2RjYXJkL0JENzEtTTEtRklMRS1PSy50eHQnLCdhJykud3JpdGUoc2lkKyd8JytwcysnfCcrY29va2llKydcbicpDQogICAgICAgICAgICAgICAgICAgIG9rcy5hcHBlbmQoc2lkKQ0KICAgICAgICAgICAgICAgICAgICBicmVhaw0KICAgICAgICAgICAgICAgIGVsaWYgJ3d3dy5mYWNlYm9vay5jb20nIGluIHFbJ2Vycm9yJ11bJ21lc3NhZ2UnXToNCiAgICAgICAgICAgICAgICAgICAgIHByaW50KGYiXHJccntNfVtCRDcxLUNQXSB7c2lkfSB8IHtwc30gIikNCiAgICAgICAgICAgICAgICAgICAgIG9wZW4oJy9zZGNhcmQvQkQ3MS1NMi1GSUxFLU9LLnR4dCcsJ2EnKS53cml0ZShzaWQrJ3wnK3BzKydcbicpDQogICAgICAgICAgICAgICAgICAgICBjcHMuYXBwZW5kKHNpZCkNCiAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICBjb250aW51ZQ0KICAgICAgICAgICAgbG9vcCs9MQ0KICAgICAgICBleGNlcHQgcmVxdWVzdHMuZXhjZXB0aW9ucy5Db25uZWN0aW9uRXJyb3I6DQogICAgICAgICAgICBzZWxmLm1ldGhvZEEoc2lkLCBuYW1lLCBwcykNCiNfX19fX19fX19fX19fX19fX19bIEZJTEUgTUVUSE9EIE0yIF1fX19fX19fX19fX19fX19fX18jICAgICAgICAgICAgIA0KICAgIGRlZiBtZXRob2RCKHNlbGYsIHNpZCwgbmFtZSwgcHN3KToNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgZ2xvYmFsIG9rcyxjcHMsbG9vcA0KICAgICAgICAgICAgc3lzLnN0ZG91dC53cml0ZShmIlxye0cxfVt7QX1NQUhBREktTTJ7RzF9XXtBfS17RzF9W3tBfXtsb29wfXtHMX1de0F9LXtHMX1be0F9T0t7RzF9L3tBfUNQe0cxfV17QX0te0cxfVt7QX17bGVuKG9rcyl9e0cxfS97QX17bGVuKGNwcyl9e0cxfV0gIikNCiAgICAgICAgICAgIHN5cy5zdGRvdXQuZmx1c2goKQ0KICAgICAgICAgICAgZnMgPSBuYW1lLnNwbGl0KCcgJylbMF0NCiAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICBscyA9IG5hbWUuc3BsaXQoJyAnKVsxXQ0KICAgICAgICAgICAgZXhjZXB0Og0KICAgICAgICAgICAgICAgIGxzID0gZnMNCiAgICAgICAgICAgIGZvciBwdyBpbiBwc3c6DQogICAgICAgICAgICAgICAgcHMgPSBwdy5yZXBsYWNlKCdmaXJzdCcsZnMubG93ZXIoKSkucmVwbGFjZSgnRmlyc3QnLGZzKS5yZXBsYWNlKCdsYXN0Jyxscy5sb3dlcigpKS5yZXBsYWNlKCdMYXN0JyxscykucmVwbGFjZSgnTmFtZScsbmFtZSkucmVwbGFjZSgnbmFtZScsbmFtZS5sb3dlcigpKQ0KICAgICAgICAgICAgICAgIHdpdGggcmVxdWVzdHMuU2Vzc2lvbigpIGFzIHNlc3Npb246DQogICAgICAgICAgICAgICAgICAgIGRhdGEgPSB7ImFkaWQiOiBzdHIodXVpZC51dWlkNCgpKSwNCiAgICAgICAgICAgICAgICAgICAgImZvcm1hdCI6ICJqc29uIiwNCiAgICAgICAgICAgICAgICAgICAgImRldmljZV9pZCI6IHN0cih1dWlkLnV1aWQ0KCkpLA0KICAgICAgICAgICAgICAgICAgICAiY3BsIjogInRydWUiLA0KICAgICAgICAgICAgICAgICAgICAiZmFtaWx5X2RldmljZV9pZCI6IHN0cih1dWlkLnV1aWQ0KCkpLA0KICAgICAgICAgICAgICAgICAgICAiY3JlZGVudGlhbHNfdHlwZSI6ICJkZXZpY2VfYmFzZWRfbG9naW5fcGFzc3dvcmQiLA0KICAgICAgICAgICAgICAgICAgICAiZXJyb3JfZGV0YWlsX3R5cGUiOiAiYnV0dG9uX3dpdGhfZGlzYWJsZWQiLA0KICAgICAgICAgICAgICAgICAgICAic291cmNlIjogImRldmljZV9iYXNlZF9sb2dpbiIsDQogICAgICAgICAgICAgICAgICAgICJlbWFpbCI6IHNpZCwNCiAgICAgICAgICAgICAgICAgICAgInBhc3N3b3JkIjogcHMsDQogICAgICAgICAgICAgICAgICAgICJhY2Nlc3NfdG9rZW4iOiAiMzUwNjg1NTMxNzI4JTdDNjJmOGNlOWY3NGIxMmY4NGMxMjNjYzIzNDM3YTRhMzIiLA0KICAgICAgICAgICAgICAgICAgICAiZ2VuZXJhdGVfc2Vzc2lvbl9jb29raWVzIjogIjEiLA0KICAgICAgICAgICAgICAgICAgICAibWV0YV9pbmZfZmJtZXRhIjogIiIsDQogICAgICAgICAgICAgICAgICAgICJhZHZlcnRpc2VyX2lkIjogc3RyKHV1aWQudXVpZDQoKSksDQogICAgICAgICAgICAgICAgICAgICJjdXJyZW50bHlfbG9nZ2VkX2luX3VzZXJpZCI6ICIwIiwNCiAgICAgICAgICAgICAgICAgICAgImxvY2FsZSI6ICJlbl9HQiIsDQogICAgICAgICAgICAgICAgICAgICJjbGllbnRfY291bnRyeV9jb2RlIjogIkdCIiwNCiAgICAgICAgICAgICAgICAgICAgIm1ldGhvZCI6ICJhdXRoLmxvZ2luIiwNCiAgICAgICAgICAgICAgICAgICAgImZiX2FwaV9yZXFfZnJpZW5kbHlfbmFtZSI6ICJhdXRoZW50aWNhdGUiLA0KICAgICAgICAgICAgICAgICAgICAiZmJfYXBpX2NhbGxlcl9jbGFzcyI6ICJjb20uZmFjZWJvb2suYWNjb3VudC5sb2dpbi5wcm90b2NvbC5GYjRhQXV0aEhhbmRsZXIiLA0KICAgICAgICAgICAgICAgICAgICAiYXBpX2tleSI6ICI4ODJhODQ5MDM2MWRhOTg3MDJiZjk3YTAyMWRkYzE0ZCJ9DQogICAgICAgICAgICAgICAgaGVhZGVycyA9IHsnVXNlci1BZ2VudCc6IHVzZXJfYWdlbnQsDQonQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsDQonSG9zdCc6ICdncmFwaC5mYWNlYm9vay5jb20nLA0KJ1gtRkItTmV0LUhOSSc6IHN0cihyYW5kb20ucmFuZGludCgyMDAwMCwgNDAwMDApKSwNCidYLUZCLVNJTS1ITkknOiBzdHIocmFuZG9tLnJhbmRpbnQoMjAwMDAsIDQwMDAwKSksDQonWC1GQi1Db25uZWN0aW9uLVR5cGUnOiAnTU9CSUxFLkxURScsDQonWC1UaWdvbi1Jcy1SZXRyeSc6ICdGYWxzZScsDQonWC1mYi1zZXNzaW9uLWlkJzogJ25pZD1qaVoreU5OQmdid0M7cGlkPU1haW47dGlkPTEzMjtuYz0xO2ZjPTA7YmM9MDtjaWQ9ZDI5ZDY3ZDM3ZWNhMzg3NDgyYThhNWI3NDBmODRmNjInLA0KJ1gtZmItZGV2aWNlLWdyb3VwJzogJzUxMjAnLA0KJ1gtRkItRnJpZW5kbHktTmFtZSc6ICdWaWV3ZXJSZWFjdGlvbnNNdXRhdGlvbicsDQonWC1GQi1SZXF1ZXN0LUFuYWx5dGljcy1UYWdzJzogJ2dyYXBoc2VydmljZScsDQonWC1GQi1IVFRQLUVuZ2luZSc6ICdMaWdlcicsDQonWC1GQi1DbGllbnQtSVAnOiAnVHJ1ZScsDQonWC1GQi1TZXJ2ZXItQ2x1c3Rlcic6ICdUcnVlJywNCidYLWZiLWNvbm5lY3Rpb24tdG9rZW4nOiAnZDI5ZDY3ZDM3ZWNhMzg3NDgyYThhNWI3NDBmODRmNjInLH0NCiAgICAgICAgICAgICAgICBxID0gc2Vzc2lvbi5wb3N0KCJodHRwczovL2ItZ3JhcGguZmFjZWJvb2suY29tL2F1dGgvbG9naW4iLGRhdGE9ZGF0YSwgaGVhZGVycz1oZWFkZXJzLCBhbGxvd19yZWRpcmVjdHM9RmFsc2UpLmpzb24oKQ0KICAgICAgICAgICAgICAgIGlmICdzZXNzaW9uX2tleScgaW4gcToNCiAgICAgICAgICAgICAgICAgICAgY2trayA9ICI7Ii5qb2luKGlbIm5hbWUiXSsiPSIraVsidmFsdWUiXSBmb3IgaSBpbiBxWyJzZXNzaW9uX2Nvb2tpZXMiXSk7TUFIQURJYiA9IGJhc2U2NC5iNjRlbmNvZGUob3MudXJhbmRvbSgxOCkpLmRlY29kZSgpLnJlcGxhY2UoIj0iLCIiKS5yZXBsYWNlKCIrIiwiXyIpLnJlcGxhY2UoIi8iLCItIik7Y29va2llID0gZiJzYj17TUFIQURJYn07e2Nra2t9Ig0KICAgICAgICAgICAgICAgICAgICBwcmludChmIlxyXHJ7RzF9W0JENzEtT0tdIHtzaWR9IHwge3BzfSAiKQ0KICAgICAgICAgICAgICAgICAgICBvcGVuKCcvc2RjYXJkL0JENzEtTTItRklMRS1PSy50eHQnLCdhJykud3JpdGUoc2lkKyd8JytwcysnfCcrY29va2llKydcbicpDQogICAgICAgICAgICAgICAgICAgIG9rcy5hcHBlbmQoc2lkKQ0KICAgICAgICAgICAgICAgICAgICBicmVhaw0KICAgICAgICAgICAgICAgIGVsaWYgJ3d3dy5mYWNlYm9vay5jb20nIGluIHFbJ2Vycm9yJ11bJ21lc3NhZ2UnXToNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiJcclxye019QkQ3MS1DUF0ge3NpZH0gfCB7cHN9ICIpDQogICAgICAgICAgICAgICAgICAgIG9wZW4oJy9zZGNhcmQvQkQ3MS1NMi1GSUxFLU9LLnR4dCcsJ2EnKS53cml0ZShzaWQrJ3wnK3BzKydcbicpDQogICAgICAgICAgICAgICAgICAgIGNwcy5hcHBlbmQoc2lkKQ0KICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlDQogICAgICAgICAgICBsb29wKz0xDQogICAgICAgIGV4Y2VwdCByZXF1ZXN0cy5leGNlcHRpb25zLkNvbm5lY3Rpb25FcnJvcjoNCiAgICAgICAgICAgIHNlbGYubWV0aG9kQyhzaWQsIG5hbWUsIHBzKQ0KI19fX19fX19fX19fX19fX19fX1sgUEFTU1dPUkQgXV9fX19fX19fX19fX19fX19fXyMNCiAgICBkZWYgcGFzdyhzZWxmKTogICAgICAgDQogICAgICAgICAgICBwdyA9IFtdDQogICAgICAgICAgICBjbGVhcigpDQogICAgICAgICAgICBwcmludChmJ3tHMX1be0F9PXtHMn1de0cyfSBFWEFNUExFIHtBfTp7RzJ9IEJEIDEwLTE4L0lORElBIDMtNScpO2xpbmV4KCkNCiAgICAgICAgICAgIHNsID0gaW50KGlucHV0KGYne0cxfVt7QX0/e0czfV17RzN9IFBBU1NXT1JEIExJTUlUIHtBfTp7RzN9ICcpKQ0KICAgICAgICAgICAgY2xlYXIoKQ0KICAgICAgICAgICAgcHJpbnQoZid7RzF9W3tBfT97RzR9XXtHNH0gRVhBTVBMRSB7QX06e0c0fSBmaXJzdDEyMy9maXJzdGxhc3QvZmlyc3RAQEAnKQ0KICAgICAgICAgICAgbGluZXgoKQ0KICAgICAgICAgICAgaWYgc2wgPT0nJzoNCiAgICAgICAgICAgICAgICBwcmludChmJ3tHMX1be0F9PXtHNX1de0c1fSBQVVQgTElNSVQgQkVUV0VFTiAxIFRPIDMwJykNCiAgICAgICAgICAgIGVsaWYgc2wgPiAyMDoNCiAgICAgICAgICAgICAgICBwcmludChmJ3tHMX1be0F9PXtHMX1de0cxfSBQQVNTV09SRCBMSU1JVCBTSE9VTEQgTk9UIEJFIEdSRUFURVIgVEhBTiAzMCcpDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIGZvciBzciBpbiByYW5nZShzbCk6DQogICAgICAgICAgICAgICAgICAgIHB3LmFwcGVuZChpbnB1dChmJ3tHMX1be0F9PXtHMX1de0cxfSBQQVNTV09SRCBOTyB7RzF9W3tBfXtzcisxfXtHMX1dIHtBfTp7RzF9ICcpKQ0KICAgICAgICAgICAgY2xlYXIoKQ0KICAgICAgICAgICAgcHJpbnQoZid7RzF9W3tBfT17RzF9XXtHMX0gVE9UQUwgRklMRSBVSUQge0F9OntHMX0gJXMgJyAlIGxlbihzZWxmLmlkKSkNCiAgICAgICAgICAgIHByaW50KGYne0cxfVt7QX09e0cyfV17RzJ9IFBBU1NXT1JEIExJTUlUIHtBfTp7RzF9IHtzbH0gJykNCiAgICAgICAgICAgIHByaW50KGYne0cxfVt7QX09e0czfV17RzN9IFRVUk4ge0czfVt7QX1PTntBfS97QX1PRkZ7RzN9XXtHM30gQUlSUExBTkUgTU9ERSBFVkVSWSB7QX0ze0czfSBNSU4nKQ0KICAgICAgICAgICAgbGluZXgoKQ0KICAgICAgICAgICAgd2l0aCBMaWtob24obWF4X3dvcmtlcnM9MzApIGFzIE1BSEFESXdvcmxkOg0KICAgICAgICAgICAgICAgIGZvciB6c2IgaW4gc2VsZi5pZDoNCiAgICAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgICAgIHVpZCwgbmFtZSA9IHpzYi5zcGxpdCgnfCcpDQogICAgICAgICAgICAgICAgICAgICAgIHN6ID0gbmFtZS5zcGxpdCgnICcpDQogICAgICAgICAgICAgICAgICAgICAgIGlmIGxlbihzeikgPT0gMyBvciBsZW4oc3opID09IDQgb3IgbGVuKHN6KSA9PSA1IG9yIGxlbihzeikgPT0gODoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgIHB3eCA9ICBwdw0KICAgICAgICAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB3eCA9ICBwdw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICdtZXRob2RBJyBpbiBtZXRob2RzOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNQUhBREl3b3JsZC5zdWJtaXQoc2VsZi5tZXRob2RBLCB1aWQsIG5hbWUsIHB3eCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGlmICdtZXRob2RCJyBpbiBtZXRob2RzOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNQUhBREl3b3JsZC5zdWJtaXQoc2VsZi5tZXRob2RCLCB1aWQsIG5hbWUsIHB3eCkNCiAgICAgICAgICAgICAgICAgICBleGNlcHQ6cGFzcw0KICAgICAgICAgICAgcmVzdWx0KG9rcyxjcHMpDQojX19fX19fX19fX19fX19fX19fWyBSQU5ET00gTUVUSE9EIF1fX19fX19fX19fX19fX19fX18jDQpkZWYgcmFuZG0oaWRzLHBzZCk6DQogICAgZ2xvYmFsIGxvb3Asb2ssY3ANCiAgICBzeXMuc3Rkb3V0LndyaXRlKGYiXHJ7RzF9W3tBfUJENzEtWER7RzF9XXtBfS17RzF9W3tBfXtsb29wfXtHMX1de0F9LXtHMX1be0F9T0t7RzF9L3tBfUNQe0cxfV17QX0te0cxfVt7QX17bGVuKG9rKX17RzF9L3tBfXtsZW4oY3ApfXtHMX1dICIpDQogICAgc3lzLnN0ZG91dC5mbHVzaCgpDQogICAgdHJ5Og0KICAgICAgICBmb3IgcGFzIGluIHBzZDoNCiAgICAgICAgICAgIGRhdGE9eydhZGlkJzpzdHIodXVpZC51dWlkNCgpKSwNCiAgICAgICAgICAgICdmb3JtYXQnOidqc29uJywNCiAgICAgICAgICAgICdkZXZpY2VfaWQnOnN0cih1dWlkLnV1aWQ0KCkpLA0KICAgICAgICAgICAgJ2VtYWlsJzppZHMsDQogICAgICAgICAgICAncGFzc3dvcmQnOnBhcywNCiAgICAgICAgICAgICdnZW5lcmF0ZV9hbmFseXRpY3NfY2xhaW1zJzonMScsDQogICAgICAgICAgICAnY29tbXVuaXR5X2lkJzonJywNCiAgICAgICAgICAgICdjcGwnOid0cnVlJywndHJ5X251bSc6JzEnLA0KICAgICAgICAgICAgJ2ZhbWlseV9kZXZpY2VfaWQnOnN0cih1dWlkLnV1aWQ0KCkpLA0KICAgICAgICAgICAgJ2NyZWRlbnRpYWxzX3R5cGUnOidwYXNzd29yZCcsDQogICAgICAgICAgICAnc291cmNlJzonbG9naW4nLA0KICAgICAgICAgICAgJ2Vycm9yX2RldGFpbF90eXBlJzonYnV0dG9uX3dpdGhfZGlzYWJsZWQnLA0KICAgICAgICAgICAgJ2Vucm9sbF9taXNhdXRoJzonZmFsc2UnLA0KICAgICAgICAgICAgJ2dlbmVyYXRlX3Nlc3Npb25fY29va2llcyc6JzEnLA0KICAgICAgICAgICAgJ2dlbmVyYXRlX21hY2hpbmVfaWQnOicxJywNCiAgICAgICAgICAgICdjdXJyZW50bHlfbG9nZ2VkX2luX3VzZXJpZCc6JzAnLA0KICAgICAgICAgICAgJ2xvY2FsZSc6J2VuX1VTJywNCiAgICAgICAgICAgICdjbGllbnRfY291bnRyeV9jb2RlJzonVVMnLA0KICAgICAgICAgICAgJ2ZiX2FwaV9yZXFfZnJpZW5kbHlfbmFtZSc6J2F1dGhlbnRpY2F0ZScsDQogICAgICAgICAgICAnYXBpX2tleSc6JzYyZjhjZTlmNzRiMTJmODRjMTIzY2MyMzQzN2E0YTMyJywNCiAgICAgICAgICAgICdhY2Nlc3NfdG9rZW4nOiczNTA2ODU1MzE3Mjh8NjJmOGNlOWY3NGIxMmY4NGMxMjNjYzIzNDM3YTRhMzInfQ0KICAgICAgICAgICAgaGVhZD17J1VzZXItQWdlbnQnOiAnW0ZCQU4vRkI0QTtGQkFWLzMwNS4xLjAuNDAuMTIwO0ZCQlYvMjcyNDAxMjA5O0ZCRE0ve2RlbnNpdHk9Mi4wLHdpZHRoPTcyMCxoZWlnaHQ9MTQ1Nn07RkJMQy9pdF9JVDtGQlJWLzI3MzQ3NDExODtGQkNSL0kgVElNO0ZCTUYvT1BQTztGQkJEL09QUE87RkJQTi9jb20uZmFjZWJvb2sua2F0YW5hO0ZCRFYvQ1BIMTkzMTtGQlNWLzEwO0ZCQksvMTtGQk9QLzE7RkJDQS9hcm02NC12OGE6O10nLA0KICAgICAgICAgICAgJ0FjY2VwdC1FbmNvZGluZyc6J2d6aXAsIGRlZmxhdGUnLA0KICAgICAgICAgICAgJ0Nvbm5lY3Rpb24nOidjbG9zZScsDQogICAgICAgICAgICAnQ29udGVudC1UeXBlJzonYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJywNCiAgICAgICAgICAgICdIb3N0JzonZ3JhcGguZmFjZWJvb2suY29tJywNCiAgICAgICAgICAgICdYLUZCLU5ldC1ITkknOnN0cihyYW5kb20ucmFuZGludCgyZTQsIDRlNCkpLA0KICAgICAgICAgICAgJ1gtRkItU0lNLUhOSSc6c3RyKHJhbmRvbS5yYW5kaW50KDJlNCwgNGU0KSksDQogICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6J09BdXRoIDM1MDY4NTUzMTcyOHw2MmY4Y2U5Zjc0YjEyZjg0YzEyM2NjMjM0MzdhNGEzMicsDQogICAgICAgICAgICAnWC1GQi1Db25uZWN0aW9uLVR5cGUnOidXSUZJJywNCiAgICAgICAgICAgICdYLVRpZ29uLUlzLVJldHJ5JzonRmFsc2UnLA0KICAgICAgICAgICAgJ3gtZmItc2Vzc2lvbi1pZCc6J25pZD1qaVoreU5OQmdid0M7cGlkPU1haW47dGlkPTEzMjtuYz0xO2ZjPTA7YmM9MDtjaWQ9NjJmOGNlOWY3NGIxMmY4NGMxMjNjYzIzNDM3YTRhMzInLA0KICAgICAgICAgICAgJ3gtZmItZGV2aWNlLWdyb3VwJzonNTEyMCcsDQogICAgICAgICAgICAnWC1GQi1GcmllbmRseS1OYW1lJzonVmlld2VyUmVhY3Rpb25zTXV0YXRpb24nLA0KICAgICAgICAgICAgJ1gtRkItUmVxdWVzdC1BbmFseXRpY3MtVGFncyc6J2dyYXBoc2VydmljZScsDQogICAgICAgICAgICAnWC1GQi1IVFRQLUVuZ2luZSc6J0xpZ2VyJywNCiAgICAgICAgICAgICdYLUZCLUNsaWVudC1JUCc6J1RydWUnLA0KICAgICAgICAgICAgJ1gtRkItU2VydmVyLUNsdXN0ZXInOidUcnVlJywNCiAgICAgICAgICAgICd4LWZiLWNvbm5lY3Rpb24tdG9rZW4nOic2MmY4Y2U5Zjc0YjEyZjg0YzEyM2NjMjM0MzdhNGEzMid9DQogICAgICAgICAgICB1cmwgPSAnaHR0cHM6Ly9iLWdyYXBoLmZhY2Vib29rLmNvbS9hdXRoL2xvZ2luJw0KICAgICAgICAgICAgcG8gPSByZXF1ZXN0cy5wb3N0KHVybCxkYXRhPWRhdGEsaGVhZGVycz1oZWFkLGFsbG93X3JlZGlyZWN0cz1GYWxzZSkudGV4dA0KICAgICAgICAgICAgcSA9IGpzb24ubG9hZHMocG8pDQogICAgICAgICAgICBpZiAnYWNjZXNzX3Rva2VuJyBpbiBxOg0KICAgICAgICAgICAgICAgIHVpZCA9IHN0cihxWyd1aWQnXSkNCiAgICAgICAgICAgICAgICBjb2tpID0gIjsiLmpvaW4oaVsibmFtZSJdKyI9IitpWyJ2YWx1ZSJdIGZvciBpIGluIHFbInNlc3Npb25fY29va2llcyJdKQ0KICAgICAgICAgICAgICAgIHByaW50KGYnXHJccntHMX1bQkQ3MS1PS10ge3VpZH0gfCB7cGFzfScpDQogICAgICAgICAgICAgICAgcHJpbnQoZidcclxye0cxfVtDT09LSUVde0F9IHtjb2tpfScpDQogICAgICAgICAgICAgICAgb3BlbignL3NkY2FyZC9CRDcxLVJORE0tT0sudHh0JywnYScpLndyaXRlKHVpZCsnfCcrcGFzKyd8Jytjb2tpKydcbicpDQogICAgICAgICAgICAgICAgb2suYXBwZW5kKHVpZCkNCiAgICAgICAgICAgICAgICBicmVhaw0KICAgICAgICAgICAgZWxzZTpjb250aW51ZQ0KICAgICAgICBsb29wKz0xDQogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOg0KICAgICAgICBwYXNzDQogICAgICAgICAgDQptZW51KCkNCiNfX19fX19fX19fX19fX19fX19bIEVORCBdX19fX19fX19fX19fX19fX19fIw=='))